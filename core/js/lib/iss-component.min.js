;"use strict";

define(function (require, exports, module) {

	/*var issDict = require("iss-dict"),*/

	vtypes_number = [ // 数字校验器
		"num", // 任意数字
		"int", // 整数
		"dbl" // 小数
	],
	
	vtypes_text = [ // 文本校验器					
		"str", // 任意字符
		"numstr", // 数字字符
		"text", // 排除指定字符：@ # $ < > * ^ & ? " ' / \ ~ |
		"alpha", // 字母
		"cap", // 大写字母
		"low", // 小写字母
		"eng", // 英文
		"chn", // 中文
		"tel", // 电话
		"mob", // 手机
		"phone", // 电话/手机(联系号码)
		"email", // 邮箱
		"card", // 身份证
		"url", // url地址
		"reg" // 自定义正则表达式
	],	
	
	validNumber = function(val, vtype, min, max, le, re, decimal) {
		
		var chkPass=true, msg="", idx=-1, i=0, len=0;

		// 格式检查
		if (isNaN(parseFloat(val)) || !/^-?\d+\.?\d*$/.test(val)) { // 数字
		
			chkPass = false;
			msg = "请使用正确的数字格式";
			
		} else if (vtype == "int") { // 整数
		
			idx = val.indexOf(".");
			if (idx != -1 && idx != (val.length - 1)) { // 存在小数点，且小数点不是最后一位
				chkPass = false;
				msg = "请使用整数类型";
			}
			
		} else if (vtype == "dbl") { // 小数
			
			idx = val.indexOf(".");
			if (idx == -1 || idx == (val.length - 1)) { // 不存在小数点，或者小数点是最后一位
				chkPass = false;
				msg = "请使用小数类型";
			}
			
		}
		
		if ( chkPass && (vtype == "num" || vtype == "dbl") && !isNaN(decimal) ) {
			idx = val.indexOf(".");
			if ( val.substring(idx+1).length != decimal ) {
				chkPass = false;
				msg = "请小数点后保留 " + decimal + " 位精度";
				if ( idx == -1 ) {
					chkPass = true;
					val += ".";
					msg = "";
					for (i=0; i<decimal; i++) {
						val += "0";
					}
				}
				if ( val.substring(idx+1).length < decimal ) {
					chkPass = true;
					msg = "";
					len = decimal - val.substring(idx+1).length;
					for (i=0; i<len; i++) {
						val += "0";
					}
				}
			}
		}
		
		if (!chkPass) { // 格式检查不通过			
			return msg;
		}
		
		// 数值范围检查
		if (!msg) {
			if (min == -Number.MAX_VALUE && max != Number.MAX_VALUE) {
				msg = re ? ( "请确认数字不大于 " + max ) : ( "请确认数字小于 " + max );
			} else if (max == Number.MAX_VALUE && min != -Number.MAX_VALUE) {
				msg = le ? ( "请确认数字不小于 " + min ) : ( "请确认数字大于 " + min );
			} else {
				msg = "请确认数字范围在 " + ( le ? "[" : "(" ) + min + ", " + max + ( re ? "]" : ")" ) + " 以内";
			}
		}
		if ( (re ? parseFloat(val) > max : parseFloat(val) >= max ) ||  (le ? parseFloat(val) < min : parseFloat(val) <= min) ) {
			chkPass = false;
		}		
		
		return chkPass ? "" : msg;
	},
	
	validString = function(val, vtype, min, max, le, re, decimal) {			
		
		var chkPass=true, reg, msg, txt, tel, mob, isIDCard1, isIDCard2;
		
		// 格式检查
		if (vtype == "str") { // 所有字符
			
		} else if (vtype == "text") { // 排除指定字符
		
			txt = this.exclude;
			reg = txt ? new RegExp("/["  + txt + "]/") : /[@#$<>\*\^&\?"'/\\~|]/;
			if ( reg.test( val ) ) {
				chkPass = false;
				msg = "不允许使用下列字符：" + ( txt ? txt.replace(/./g, function(t){return t+"、"}) : "@、#、$、<、>、*、^、&、?、\"、'、/、\、~、|" );
			}
			
		} else if (vtype == "numstr") { // 数字字符
		
			reg = /^[0-9]+$/;
			if ( !reg.test( val ) ) {
				chkPass = false;
				msg = "请使用数字字符";
			}
			
		} else if (vtype == "alpha") { // 字母
			
			reg = /^[A-Za-z]+$/;
			if ( !reg.test( val ) ) {
				chkPass = false;
				msg = "请使用字母字符";
			}
			
		} else if (vtype == "cap") { // 大写字母
			
			reg = /^[A-Z]+$/;
			if ( !reg.test( val ) ) {
				chkPass = false;
				msg = "请使用大写字母";
			}
			
		} else if (vtype == "low") { // 大写字母
			
			reg = /^[a-z]+$/;
			if ( !reg.test( val ) ) {
				chkPass = false;
				msg = "请使用小写字母";
			}
			
		} else if (vtype == "eng") { // 英文字符
			
			reg = /^[^\u4E00-\u9FA5]+$/;
			if ( !reg.test( val ) ) {
				chkPass = false;
				msg = "请使用英文字符";
			}
			
		} else if (vtype == "chn") { // 中文字符
			
			reg = /^[\u4E00-\u9FA5]+$/;
			if ( !reg.test( val ) ) {
				chkPass = false;
				msg = "请使用中文字符";
			}
			
		} else if (vtype == "tel") { // 电话
			
			reg = /^(\(\d{3,4}\)|\d{3,4}\s?-\s?)?\d{7,8}(\s?-\d{1,4})?$/;
			if ( !reg.test( val ) ) {
				chkPass = false;
				msg = "不是有效的电话号";
			}
			
		} else if (vtype == "mob") { // 手机
			
			reg = /^(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/;
			if ( !reg.test( val ) ) {
				chkPass = false;
				msg = "不是有效的手机号";
			}
			
		} else if (vtype == "phone") { // 电话/手机(联系号码)
			
			tel = /^(\(\d{3,4}\)|\d{3,4}\s?-\s?)?\d{7,8}(\s?-\d{1,4})?$/,
			
			mob = /^(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/;
			
			if ( !tel.test( val ) && !mob.test(val) ) {
				chkPass = false;
				msg = "不是有效的联系号码";
			}
			
		} else if (vtype == "email") { // email
			
			reg = /^[a-z0-9]([a-z0-9]*[-_]?[a-z0-9]+)*@([a-z0-9]*[-_]?[a-z0-9]+)+[\.][a-z]{2,3}([\.][a-z]{2})?$/i;
			if ( !reg.test( val ) ) {
				chkPass = false;
				msg = "不是有效的email地址";
			}
			
		} else if (vtype == "card") { // 身份证
			
			//身份证正则表达式(15位)
			isIDCard1 = /^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$/,
			//身份证正则表达式(18位)
			isIDCard2 = /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{4}$/;
			
			if ( !isIDCard1.test( val ) && !isIDCard2.test( val ) ) {
				chkPass = false;
				msg = "不是有效的身份证号";
			}
			
		} else if(vtype == "url"){
			
			reg = /^(https?|ftp|http):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/;
			if ( !reg.test( val ) ) {
				chkPass = false;
				msg = "不是有效的url地址";
			}
			
		} else if (vtype == "reg") { // 自定义正则表达式
			
			req = this.regexp;
			req = new RegExp(req);
			if ( !req.test( val ) ) {
				chkPass = false;
				msg = this.validmsg ? this.validmsg : "校验不通过";
			}
			
		}
		
		if (!chkPass) { // 格式检查不通过			
			return msg;
		}
		
		// 长度范围检查
		if (!msg) {
			if (min == -Number.MAX_VALUE && max != Number.MAX_VALUE) {
				msg = re ? ( "请确认字符长度不大于 " + max ) : ( "请确认字符长度小于 " + max );
			} else if (max == Number.MAX_VALUE && min != Number.MAX_VALUE) {
				msg = le ? ( "请确认字符长度不小于 " + min ) : ( "请确认字符长度大于 " + min );
			} else {
				msg = "请确认字符长度在 " + ( le ? "[" : "(" ) + min + ", " + max + ( re ? "]" : ")" ) + " 以内";
			}
		}
		
		if ( (re ? val.length > max : val.length >= max ) ||  (le ? val.length < min : val.length <= min) ) {
			chkPass = false;
		}
		
		return chkPass ? "" : this.validmsg ? this.validmsg : msg;
	},
	
	mixin = {
		"props": {
			"vtype": { // 校验类型
				"type": String,
				"default": "str"
			},
			"range": { // 取值范围 [1, 100] 或 (0, 100) 或 [1, 100) 或 (0, 100], 中括号表示小于等于、大于等于，小括号表示小于、大于
				"type": String,
				"default": ""
			},
			"regexp": String, // 自定义的校验表达式
			"exclude": String, // 需要排除的字符
			"validmsg": String // 验证不通过时的提示文本
		},
		"methods": {
			"validate": function() {
				if ($(this.$el).filter("[readonly]").length > 0 && !$(this.$el).hasClass("iss-select") && !$(this.$el).hasClass("iss-date")) {
					// 只读项目不校验
					return [];
				}
				var min, max, le, re, decimal, range = issapi.trim(this.range),
				lepos = range.indexOf("["),
				repos = range.lastIndexOf("]"),
				//lepos2 = range.indexOf("("),
				//repos2 = range.lastIndexOf(")"),
				commapos = range.indexOf(","),
				commapos2 = range.lastIndexOf(","),
				nopass, vv,  vtype = issapi.trim(this.vtype), that = this;
				if (!issapi.isValid(range) && $.inArray(vtype, vtypes_text) !== -1) {
					// 文本字符默认限定为100个字符长度
					range = "[0, 100]";
				}
				le = lepos === 0;
				re = repos === range.length - 1;
				min = parseFloat(range.substring(1, commapos == -1 ? range.length : commapos).trim());
				if (commapos === commapos2) {
					max = parseFloat(range.substring(commapos+1).trim());
				} else {
					max = parseFloat(range.substring(commapos+1, commapos2).trim());
					decimal = parseFloat(range.substring(commapos2+1).trim());
				}
				min = isNaN(min) ? -Number.MAX_VALUE : min;
				max = isNaN(max) ? Number.MAX_VALUE : max;
								
				if ($.isArray(this.vv)) {
					return this.vv.length > 0 ? [] : [this];
				} else {
					vv = !this.vv ? "" : String(this.vv);
				}
				if ($(this.$el).hasClass("must") && issapi.trim(String(vv)).length === 0) {
					nopass = this.validmsg ? this.validmsg :"请输入数据";
				} else if (!$(this.$el).hasClass("must") && String(vv).length === 0) {
					nopass = false;
				} else {
					if ($.inArray(vtype, vtypes_text) !== -1) {
						nopass = validString.call(this, vv, vtype, min, max, le, re, decimal);
					} else if ($.inArray(vtype, vtypes_number) !== -1) {
						nopass = validNumber.call(this, vv, vtype, min, max, le, re, decimal);
					}
				}
				
				if (nopass) {					
					$(this.$el).addClass("valid").bind("mouseover", function() {
						layer.tips(nopass, this, {tips: [2, "#69c9ed"]});
					}).focus(function() {
						$(that.$el).removeClass("valid").unbind("mouseover");
					});
					return [this];
				} else {
					$(this.$el).removeClass("valid").unbind("mouseover");
					return [];
				}
			}
		}
	},
	
	checkMixin = {
		"model": {
            "prop": "vv",
            "event": "changeval"
        },
        "props": {
            "vv": {
                "type": [Array, String],
                "default": [""]
            },
            "title": {
                "type": String,
                "default": "选项"
            },
            "value": {
                "type": String,
                "default": ""
            }
        },
		"computed": {
			"notArray": function() {
				return !$.isArray(this.vv);
			},
			"vvs": function() {
				var i=0, _vvs;
				if (!$.isArray(this.vv)) {
					_vvs = String(this.vv).split(" ");
				} else {
					_vvs = this.vv.slice(0);
				}			
				for (i=0; i<_vvs.length; i++) {
					_vvs[i] = String(_vvs[i]).trim();
				}
				return _vvs;
			}
		},
		"watch": {
			"vv": function(newVal) {
				this.setStyle();
			}
		},
		"mounted": function () {
            this.setStyle();
		},
        "methods": {
            "emitClick": function (e) {
                var ipt=$(this.$el), idx=-1, i=0, chk, that;
                if (ipt.hasClass("readonly")) {
                    return;
                } else {
					for (i=0; i<this.vvs.length; i++) {
						if (this.vvs[i] === String(this.value)) {
							idx = i;
							break;
						}
					}        
                    if (idx !== -1) {
                        ipt.addClass("no");
                        this.vvs.splice(idx, 1);
                    } else {
                        ipt.removeClass("no");						
						/*this.vvs.splice(0, this.vvs.length);*/
						chk = ipt.hasClass("iss-checkbox");
						that = this;
						ipt.parent().find(chk ? ".iss-checkbox" : ".iss-tag").each(function() {
							if (!$(this).hasClass("no")) {
								that.vvs.push(String($(this).attr("value")));
							}							
						});
                    }
					this.$emit("changeval", this.notArray ? this.vvs.join(" ").trim() : this.vvs, e);
                }
            },
			"reset": function() {
				if (!$(this.$el).hasClass("readonly")) {
					this.$emit("changeval", "");
				}
			},
			"setStyle": function() {
				var ipt = $(this.$el), i=0, idx=-1, chk, wrp,
				fmt = ipt.closest("table").parent(".iss-form");
				if (fmt.length) {
					if (fmt.hasClass("readonly")) {
						if (!ipt.hasClass("editable")) {
							ipt.addClass("readonly");
						}
					}
				} else {
					wrp = ipt.closest("div.iss-list");
					if (wrp.hasClass("readonly")) {
						if (!ipt.hasClass("editable")) {
							ipt.addClass("readonly"); 
						}
					}
				}
				for (i=0; i<this.vvs.length; i++) {
					if (this.vvs[i] === String(this.value)) {
						idx = i;
						break;
					}
				}
				if (idx === -1) {
					if (ipt.hasClass("readonly")) {
						ipt.remove();
					} else {
						ipt.addClass("no");
					}
				} else {
					ipt.removeClass("no");
					chk = ipt.hasClass("iss-checkbox");
					if (ipt.hasClass("readonly") && ipt.next(chk ? ".iss-checkbox" : ".iss-tag").length) {
						ipt.text(ipt.text()+"，");
					}
				}
			}
        }
	};
	
	Vue.mixin({
		"methods": {
			"validate": function() {
				var i=0, no_pass = [];
				for (i=0; i<this.$children.length; i++) {
					no_pass = no_pass.concat(this.$children[i].validate());
				}
				return no_pass;
			}
		},
		"data": function() {
			return {
				/*"dict": issDict*/
			};
		}		
	});
	
	/** 面板 */
    Vue.component("IssPanel", {
        "template": '<div class="iss-panel">\
						<div class="tdiv" v-if="!!title">\
							<div class="title down"><span>{{title}}</span><slot name="subtitle"></slot></div>\
						</div>\
						<div class="wrap"><div><slot></slot></div><slot name="footer"></slot></div>\
					</div>',
        "props": {
            "title": String
        },
        "mounted": function () {
            var panel=$(this.$el), caption=panel.children(".tdiv").children(".title"), wrap=caption.parent().next();            
            wrap.children("div:first").next().addClass("footer");
            caption.children("span").next().addClass("subtitle");
			caption.click(function (e) {
                //if (e.target !== this) return;
                if (wrap.filter(":visible").length) {
                    $(this).removeClass("down").addClass("up");
                    wrap.hide();
                } else {
                    $(this).removeClass("up").addClass("down");
                    wrap.show();
                }
            });            
        }
    });
    /*****************************************************************/

	/** 卡片 */
    Vue.component("IssCard", {
        "template": '<div class="iss-card">\
						<div class="title down" v-if="!!title"><span>{{title}}</span><slot name="subtitle"></slot></div>\
						<div class="wrap"><div><slot></slot></div><slot name="footer"></slot></div>\
					</div>',
        "props": {
            "title": String
        },
        "mounted": function () {
            var panel = $(this.$el),
            caption = panel.children(".title"),
            wrap = caption.next();
            wrap.children("div:first").next().addClass("footer");
            caption.children("span").next().addClass("subtitle");
			caption.click(function (e) {
                //if (e.target !== this) return;
                if (wrap.filter(":visible").length) {
                    $(this).removeClass("down").addClass("up");
                    wrap.hide();
                } else {
                    $(this).removeClass("up").addClass("down");
                    wrap.show();
                }
            });
        }
    });
    /*****************************************************************/
	
	/** 单选 */
    Vue.component("IssRadio", {
        "template": '<span class="iss-radio">\
						<span v-for="opt of datasource" :value="String(opt.CCde)" @click="emitClick">{{opt.CCnm}}</span>\
					</span>',
		"mixins": [mixin],
		"model": {
            "prop": "vv",
            "event": "changeval"
        },
        "props": {
            "vv": {
                "type": String,
                "default": ""
            },
          	"datasource": {
                "type": Array,
                "default": [{CCde: "", CCnm: "选项"}]
            }
		},
        "watch": {
			"vv": function(newVal) {
				this.setStyle();
			}
		},
		"mounted": function () {
			this.setStyle();
        },
        "methods": {
            "emitClick": function (e) {
                var ipt = $(this.$el);
                if (ipt.hasClass("readonly")) {
                    return;
                } else {
                    $(e.target).removeClass("no").siblings("span").addClass("no");
                    this.$emit("changeval", $(e.target).attr("value"), e);
                }
            },
			"reset": function() {
				if (!$(this.$el).hasClass("readonly")) {
					this.$emit("changeval", "");
				}
			},
			"setStyle": function() {
				var i=0, ipt = $(this.$el), wrp, that = this,
				fmt = ipt.closest("table").parent(".iss-form");
				if (fmt.length) {
					if (fmt.hasClass("readonly")) {
						if (!ipt.hasClass("editable")) {
							ipt.addClass("readonly");
						}
					}
				} else {
					wrp = ipt.closest("div.iss-list");
					if (wrp.hasClass("readonly")) {
						if (!ipt.hasClass("editable")) {
							ipt.addClass("readonly");
						}
					}
				}			
				if (ipt.hasClass("readonly")) {
					ipt.html("");
					for (i=0; i<this.datasource.length; i++) {
						if (String(this.datasource[i].CCde) === String(this.vv)) {
							ipt.text(String(this.datasource[i].CCnm));
							break;
						}
					}
				} else {
					ipt.children("span").each(function() {
						if ($(this).attr("value") === String(that.vv)) {
							$(this).removeClass("no");
						} else {
							$(this).addClass("no");
						}
					});
				}
			}
        }
    });
    /*****************************************************************/

	/** 复选 */
    Vue.component("IssCheckbox", {
        "template": '<span class="iss-checkbox" :value="value" @click="emitClick">{{title}}</span>',
        "mixins": [mixin, checkMixin]
    });
    /*****************************************************************/

	/** 标签 */
    Vue.component("IssTag", {
		"template": '<span class="iss-tag" :value="value" @click="emitClick">{{title}}</span>',
        "mixins": [mixin, checkMixin]		
    });
    /*****************************************************************/
	
	/** 日历 */
    Vue.component("IssDate", {
        "template": "<span class='iss-date'><input placeholder='请输入日期' :value='vd' readonly='readonly'/><i class='calc'></i></span>",
        "mixins": [mixin],
		"model": {
            "prop": "vv",
            "event": "changeval"
        },
		"props": {
            "vv": String,
            "datefmt": {
				"type": String,
				"default": "yyyy-MM-dd"
			},
			"mindate": {
				"type": String,
				"default": "0001-01-01 00:00:00"
			},
			"maxdate": {
				"type": String,
				"default": "9999-12-31 23:59:59"
			}
        },
		"computed": {
			"vd": function() {
				if (this.vv) {
					var d = new Date(this.vv);
					if (String(d) != "Invalid Date") {
						return d.format(this.datefmt);
					}					
				}
				return this.vv;
			}
		},
        "mounted": function () {
        	this.setStyle();
			this.bindDate();
        },
        "methods": {
            "emitClick": function (e) {
                var that = this, ipt = $(this.$el);
                if (ipt.hasClass("readonly")) {
                    return;
                }
            },
            "bindDate":function(e){
            	var that = this, ipt = $(this.$el), minType, maxType, minD, maxD, hidx, didx, midx, type = "date";
                if (ipt.hasClass("readonly")) {
                    return;
                } else {
					if (hidx != -1) {
						if (didx != -1) {
							type = "datetime";
						} else {
							type = "time";
						}
					} else if (midx != -1) {
						if (didx != -1) {
							type = "date";
						} else {
							type = "month";
						}						
					} else {
						type ="year";
					}
					laydate.render({
						"elem": ipt.find("input")[0],
						"type": type,
						"format": that.datefmt,
						"beforeRender": function(obj) {
							minType = issapi.getType(that.mindate);
							maxType = issapi.getType(that.maxdate);
							minD = minType === "string" ? that.mindate : minType === "date" ? that.mindate.format("yyyy-MM-dd HH:mm:ss") : that.mindate;
							maxD = maxType === "string" ? that.maxdate : maxType === "date" ? that.maxdate.format("yyyy-MM-dd HH:mm:ss") : that.maxdate;
							minD = minD ? minD : "0001-01-01 00:00:00";
							maxD = maxD ? maxD : "9999-12-31 23:59:59";
							var t=this;
							t.min = minD, t.max = maxD;
							$.each(["min", "max"], function (e, n) {
								var a = [], i = [];
								a = (t[n].match(/\d+-\d+-\d+/) || [""])[0].split("-"), i = (t[n].match(/\d+:\d+:\d+/) || [""])[0].split(":");
								t[n] = {
									year: 0 | a[0] || (new Date).getFullYear(),
									month: a[1] ? (0 | a[1]) - 1 : (new Date).getMonth(),
									date: 0 | a[2] || (new Date).getDate(),
									hours: 0 | i[0],
									minutes: 0 | i[1],
									seconds: 0 | i[2]
								}
							});
						},
						"done": function (value) {
							that.$emit("changeval", value);
						}
					});
					
                }
            },
            "setStyle": function () {
                var ipt = $(this.$el), wrp,
                fmt = ipt.closest("table").parent(".iss-form");
                if (fmt.length) {
                    if (fmt.hasClass("readonly")) {
                        if (!ipt.hasClass("editable")) {
                            ipt.addClass("readonly");
							ipt.find("input").removeAttr("placeholder");
                        }
                    } else {
						if (ipt.hasClass("readonly")) {
							ipt.find("input").removeAttr("placeholder");
                        }
					}
                } else {
                    wrp = ipt.closest("div.iss-list");
                    if (wrp.hasClass("readonly")) {
                        if (!ipt.hasClass("editable")) {
                            ipt.addClass("readonly");
							ipt.find("input").removeAttr("placeholder");
                        }
                    } else {
						if (ipt.hasClass("readonly")) {
							ipt.find("input").removeAttr("placeholder");
                        }
					}
                }
            },
			"reset": function() {
				if (!$(this.$el).hasClass("readonly")) {
					this.$emit("changeval", "");
				}
			}
        }
    });
    /*****************************************************************/

    /** 开关 */
    Vue.component("IssSwitch", {
        "template": '<span class="iss-switch" @click="emitClick"></span>',
        "mixins": [mixin],
		"model": {
            "prop": "vv",
            "event": "changeval"
        },
        "props": {
            "vv": {
                "type": String,
                "default": ""
			},
			"datasource": {
                "type": Array,
                "default": [{CCde: "0", CCnm: "否"}, {CCde: "1", CCnm: "是"}]
            }
        },
		"watch": {
			"vv": function(newVal) {
				this.setStyle();
			}
		},
        "mounted": function () {
            this.setStyle();
        },
        "methods": {
            "emitClick": function (e) {
                var ipt = $(this.$el);
                if (ipt.hasClass("readonly")) {
                    return;
                } else {
                    if (String(this.vv) === String(this.datasource[0].CCde)) {
                        ipt.removeClass("no");
						ipt.attr('data-content', String(this.datasource[1].CCnm));
                        this.$emit("changeval", String(this.datasource[1].CCde), e);
                    } else {
                        ipt.addClass("no");
						ipt.attr('data-content', String(this.datasource[0].CCnm));
                        this.$emit("changeval", String(this.datasource[0].CCde), e);
                    }
                }
            },
			"reset": function() {
				if (!$(this.$el).hasClass("readonly")) {
					this.$emit("changeval", "");
				}
			},
			"setStyle": function() {
				var ipt = $(this.$el), wrp, nlen, ylen, len,
				fmt = ipt.closest("table").parent(".iss-form");
				if (fmt.length) {
					if (fmt.hasClass("readonly")) {
						if (!ipt.hasClass("editable")) {
							ipt.addClass("readonly");
						}
					}
				} else {
					wrp = ipt.closest("div.iss-list");
					if (wrp.hasClass("readonly")) {
						if (!ipt.hasClass("editable")) {
							ipt.addClass("readonly");
						}
					}
				}
				if (String(this.vv) === String(this.datasource[1].CCde)) {                
					ipt.removeClass("no").attr('data-content', String(this.datasource[1].CCnm));
				} else if (String(this.vv) === String(this.datasource[0].CCde)) {
					ipt.addClass("no").attr('data-content', String(this.datasource[0].CCnm));				
				} else { // vv没有设置值时
					this.$emit("changeval", String(this.datasource[0].CCde));
					ipt.addClass("no").attr('data-content', String(this.datasource[0].CCnm));
				}
				nlen = String(this.datasource[0].CCnm).length, ylen = String(this.datasource[1].CCnm).length;
				len = ylen > nlen? ylen : nlen;
				if (ipt.hasClass("readonly")) {
					ipt.width( "auto" );
				} else if (len <= 1) {
					ipt.width( 50 );
				} else if (len <= 2) {
					ipt.width( 65 );
				} else if (len <= 3) {
					ipt.width( 80 );
				} else if (len <= 4) {
					ipt.width( 90 );
				}
			}
        }
    });
    /*****************************************************************/

	/** 图片 */
    Vue.component("IssImg", {
        "template": '<span class="iss-img" @click="emitClick">{{files.length>0?"":"请上传"}}<img v-for="f of files" :src="f?(p1+encodeURI(encodeURI(f))):p2" /></span>',
		"mixins": [mixin],
		"model": {
            "prop": "vv",
            "event": "changeval"
        },
        "props": {
            "vv": {
                "type": [String, Array],
                "default": ""
            }
        },
		"data": function() {
			return {
				"p1": issapi.appCxtPath + issapi.downloadPath + "?key=",
				"p2": issapi.appCxtPath + "/core/theme/" + issVer.theme + "/img/default_icon.png"
			}
		},
		"computed": {
			"files": function() {
				var i=0, _vvs;
				if (!$.isArray(this.vv)) {
					if (!this.vv) {
						_vvs = [];
					} else {
						_vvs = String(this.vv).split(",");
					}					
				} else {
					_vvs = this.vv.slice(0);
				}			
				for (i=0; i<_vvs.length; i++) {
					_vvs[i] = String(_vvs[i]).trim();
				}
				
				return _vvs;				
			}
        },
		"watch33": {
			"vv": function() {
				var that=this;
				this.$nextTick(function () {
					$(this.$el).children("img").each(function() {
						$(this).attr("style", that.sstyle);
					});
				});
			}
		},
        "mounted": function () {
            this.setStyle();
        },
        "methods": {
            "emitClick": function (e) {
                var ipt = $(this.$el);
                if (ipt.hasClass("readonly")) {
                	return;
                } else {
                    this.$emit("click", this, e);
                }
			},
			"setStyle": function() {
				var ipt = $(this.$el), wrp,
				fmt = ipt.closest("table").parent(".iss-form");
				if (fmt.length) {
					if (fmt.hasClass("readonly")) {
						if (!ipt.hasClass("editable")) {
							ipt.addClass("readonly");
						}
					}
				} else {
					wrp = ipt.closest("div.iss-list");
					if (wrp.hasClass("readonly")) {
						if (!ipt.hasClass("editable")) {
							ipt.addClass("readonly");
						}
					}
				}
			}
        }
    });
    /*****************************************************************/	

	/** 链接 */
    Vue.component("IssLink", {
        "template": '<input class="iss-link" :value="value" readonly @click="emitClick"/>',
		"props": {
			"value": String,
			"title": String
		},
		"mounted": function() {
			var ipt = $(this.$el), that = this;
			ipt.hover(function() {
				ipt.attr("title", that.title ? (that.title + "：" + this.value) : this.value);
			}, function() {
				ipt.removeAttr("title");
			})
			if (!this.value) {
				$(this.$el).removeClass("underline");
			} else {
				$(this.$el).addClass("underline");
			}
		},
		"updated": function() {
			if (!this.value) {
				$(this.$el).removeClass("underline");
			} else {
				$(this.$el).addClass("underline");
			}
		},
		"methods": {
            "emitClick": function (e) {
                var ipt = $(this.$el);
                if (ipt.hasClass("readonly")) {
                    return;
                } else {
                    this.$emit("click", e);
                }
            }
        }
    });
    /*****************************************************************/
	
	/** 按钮 */
    Vue.component("IssBtn", {
        "template": '<input class="iss-btn" type="button" @click="emitClick"/>',
        "props": {
            "type": String,
            "value": String
        },
        "mounted": function () {
            var ipt=$(this.$el), val=this.value, title=ipt.attr("title");
            if (this.type === "query") {
                ipt.addClass("query").val(val || "查询");
            } else if (this.type === "reset") {
                ipt.addClass("reset").val(val || "重置");
            } else if (this.type === "insert") {
                ipt.addClass("insert").val(val || "增加");
            } else if (this.type === "save") {
                ipt.addClass("save").val(val || "保存");
            } else if (this.type === "submit") {
                ipt.addClass("submit").val(val || "提交");
            } else if (this.type === "delete") {
                ipt.addClass("delete").val(val || "删除");
            } else if (this.type === "modify") {
                ipt.addClass("modify").val(val || "修改");
            } else if (this.type === "pass") {
                ipt.addClass("pass").val(val || "审核通过");
            } else if (this.type === "nopass") {
                ipt.addClass("nopass").val(val || "审核不通过");
            } else if (this.type === "append") {
                ipt.addClass("small append").attr("title", title || "增加");
            } else if (this.type === "view") {
                ipt.addClass("small view").attr("title", title || "查看");
            } else if (this.type === "update") {
                ipt.addClass("small update").attr("title", title || "修改");
            } else if (this.type === "remove") {
                ipt.addClass("small remove").attr("title", title || "删除");
			} else if (this.type === "set") {
                ipt.addClass("small set").attr("title", title || "设置");
			} else if (this.type === "release") {
                ipt.addClass("small release").attr("title", title || "启用");
			} else if (this.type === "cancelrelease") {
                ipt.addClass("small cancelrelease").attr("title", title || "禁用");
			} else if (this.type === "common") {
                ipt.addClass("small common").attr("title", title || "点击操作");
            } else if (this.type === "relate") {
                ipt.addClass("small relate").attr("title", title || "关联");
            } else if (this.type === "relateCancel") {
                ipt.addClass("small relateCancel").attr("title", title || "取消关联");
            } else if (this.type === "pause") {
                ipt.addClass("small pause").attr("title", title || "暂停");
            } else if (this.type === "restart") {
                ipt.addClass("small restart").attr("title", title || "重启");
            } else {
                ipt.addClass("base").val(val || "按钮").attr("title", title || val || "按钮");
            }
        },
        "methods": {
            "emitClick": function (e) {
                var i=0, ipt=$(this.$el), ifm=this.$parent, ipts=ifm ? ifm.$children : null;
                if (ipt.hasClass("readonly")) {
                    return;
                } else {
					if (ipt.hasClass("reset")) {
						if (issapi.isValid(ifm)) {
							if (issapi.isValid(ipts)) {
								for (i=0; i<ipts.length; i++) {
									if ($(ipts[i].$el).hasClass("iss-form")) {
										ipts[i].reset();
										break;
									}
								}
							}
						}
						
					}
					this.$emit("click", e);
                }
            }
        }
    });
    /*****************************************************************/
	
    /** 输入框 */
    Vue.component("IssInput", {
        "template": '<input class="iss-input" v-if="String(multiline)!==String(true)" :value="_v" \
					@input="updateValue" @click="emitClick" @change="emitChange" @focus="emitFocus" @blur="emitBlur"/>\
				   <textarea class="iss-input" v-else :value="_v" \
					@input="updateValue" @click="emitClick" @change="emitChange" @focus="emitFocus" @blur="emitBlur"/>',
		"mixins": [mixin],
		"model": {
            "prop": "vv",
            "event": "input"
        },
		"props": {
			"vv": {
                "type": String,
                "default": ""
            },			
			"format": {
                "type": String,
                "default": ""
            },
			"multiline": {
				"type": String,
				"default": "false"
			}
		},
        "computed": {
			"_v": function() {
				var fmt, fun, param, d, vval = String(this.vv);					
				if (issapi.isValid(this.format) && issapi.isValid(vval)) {
					fmt = String(this.format).split(",");
					fun = fmt[0].trim();
					param = fmt[1].trim();
					if ("fix" === fun) {
						vval = issapi.numfix(vval, param);
					} else if ("fmt" === fun) {
						d = Date.parse(vval);
						if (!isNaN(d)) {
							vval = new Date(d).format(param);
						}
					}
				}
				return vval;
			}
        },       
        "mounted": function () {
            var ipt = $(this.$el), that=this;
            this.setReadonly();
            if (issapi.browser.isIE9) { // vue 在ie9下组件处理 input 事件时的bug ，需要设置vmodel=true，否则不触发input事件
                this.$el.vmodel = true;
            }
			//ipt.addClass("iss-input"); // 不使用 class="iss-input" 方式写到模板中，在ie11下，外部使用 :class ，会导致模板上的 class 丢失
            this.autoExpand(this.$el);
			ipt.hasClass("readonly") && String(this.multiline) !== String(true) && ipt.hover(function() {
				ipt.attr("title", this.value);
			}, function() {
				ipt.removeAttr("title");
			});
			ipt.focus(function() {
				that.setReadonly();
			});
        },
        "updated": function () {
            this.autoExpand(this.$el);
        },
        "methods": {
            "emitClick": function (e) {
                this.$emit("click", this, e);
            },
            "emitChange": function (e) {
                this.$emit("change", this, e);
            },
            "emitFocus": function (e) {
                this.$emit("focus", this, e);
            },
            "emitBlur": function (e) {
                this.$emit("blur", this, e);
            },
            "updateValue": function (e) {
                var val = this.$el.value;
                this.$emit("input", val, e);
                this.autoExpand(this.$el);
            },
            "autoExpand": function (el) {
				if (String(this.multiline) === String(true)) {
					$(el).css("height", "");
					var sh = el.scrollHeight, ch = el.clientHeight;
					sh = sh > ch ? sh : ch;
					if (sh < 54) {
						sh = 54;
					}
					$(el).css("height", sh - 4);
				}
               
            },
			"setReadonly": function() {
				var ipt = $(this.$el), wrp,
				fmt = ipt.closest("table").parent(".iss-form");
				if (fmt.length) {
					if (fmt.hasClass("readonly")) {
						if (!ipt.hasClass("editable")) {
							ipt.attr("readonly", true);
							ipt.addClass("readonly");
						}
					} else if (fmt.hasClass("editable")) {
						if (ipt.hasClass("readonly")) {
							ipt.attr("readonly", true);
						}
					} else if (ipt.hasClass("readonly")) {
						ipt.attr("readonly", true);
					}
				} else {
					wrp = ipt.closest("div.iss-list");
					if (wrp.length) {
						if (wrp.hasClass("readonly")) {
							if (!ipt.hasClass("editable")) {
								ipt.attr("readonly", true);
								ipt.addClass("readonly");
							}
						} else if (wrp.hasClass("editable")) {
							if (ipt.hasClass("readonly")) {
								ipt.attr("readonly", true);
							}
						}
					} else if (ipt.hasClass("readonly")) {
						ipt.attr("readonly", true);
						ipt.addClass("readonly");
					}
				}
			},
			"reset": function() {
				if (!$(this.$el).hasClass("readonly")) {
					this.$emit("input", "");
				}				
			}
        }
    });
    /*****************************************************************/

	/** 下拉 */
    Vue.component("IssSelect", {
        "template": '<span class="iss-select" @click="emitClick">\
					<input v-model="text" readonly="readonly"/><i class="down"></i>\
					<div class="wrap">\
						<p value="" :class="{selected: !String(vv)}" @click="pClick">请选择</p>\
						<p v-if="$.inArray(opt.CCde, offs)===-1" v-for="opt of datasource" :value="String(opt.CCde)" \
							:class="{selected:opt.CCde===String(vv)}" @click="pClick">{{opt.CCnm}}</p>\
					</div>\
				</span>',
        "mixins": [mixin],
		"model": {
            "prop": "vv",
            "event": "changeval"
        },
        "props": {
            "vv": {
                "type": String,
                "default": ""
            },
            "datasource": {
                "type": Array,
                "default": [{"CCde": "", "CCnm": "请选择"}]
            },
			"off": {
				"type": [Array, String],
				"default": ""
			}
		},
		"computed": {
			"offs": function() {
				var i=0, ofs = [], ofss;
				if (issapi.getType(this.off) === "string") {
					ofss = this.off.split(",");
					for (i=0; i<ofss.length; i++) {
						ofs[i] = issapi.trim(ofss[i]);
					}
				} else if (issapi.getType(this.off) === "array") {
					for (i=0; i<this.off.length; i++) {
						ofs[i] = issapi.trim(this.off[i]);
					}
				}
				return ofs;
			},
            "text": function () {
				var i=0;
				for (i=0; i<this.datasource.length; i++) {
					if ($.inArray(String(this.datasource[i].CCde), this.offs)===-1 && String(this.datasource[i].CCde) === String(this.vv)) {
						return String(this.datasource[i].CCnm);
					}
				}
				if (this.$el && !$(this.$el).hasClass("readonly")) {
					return "请选择";
				}
				return "请选择";
            }
		},
		"mounted": function () {
            var ipt=$(this.$el), lst, wraper=document.issSelectWraper,
			fmt = ipt.closest("table").parent(".iss-form");
			if (fmt.length) {
				if (fmt.hasClass("readonly")) {
					if (!ipt.hasClass("editable")) {
						ipt.addClass("readonly");
					}
				}
			} else {
				lst = ipt.closest("div.iss-list");
				if (lst.hasClass("readonly")) {
					if (!ipt.hasClass("editable")) {
						ipt.addClass("readonly");
					}
				}
			}
            if (!wraper) {
                wraper = document.issSelectWraper = $('<div></div>').addClass("iss-select-wrap");
				$(document.body).append(wraper);
                $(document).on("click", function (e) {
					if (window.openedselect
						&& $(e.target).closest(".iss-select").length === 0 && $(e.target).closest(".iss-select-wrap").length === 0) {
						window.openedselect.closeDropdown();
					}
                });
            }				
        },
        "methods": {
            "emitClick": function (e) {
                var ipt = $(this.$el);
                if (ipt.hasClass("readonly")) {
                    return;
                } else {
                    if (!window.openedselect) {
                        this.openDropdown();
                    } else {
                        if (window.openedselect !== this) {
                            window.openedselect.closeDropdown();
                            this.openDropdown();
                        } else {
                            this.closeDropdown();
                        }
                    }
                }
            },
			"pClick": function(e) {
				if (window.openedselect !== null) {					
					window.openedselect.text = $(e.target).text();
					window.openedselect.$emit("changeval", $(e.target).attr("value"));
					window.openedselect.closeDropdown();
					this.$emit("change", this, e);
				}
				if (!this.vv /*&& !ipt.hasClass("readonly")*/) {
					$(this.$el).find("input").val("请选择");
				}
			},
            "closeDropdown": function () {
                var ipt = $(this.$el), iele = ipt.find("i"), wraper=document.issSelectWraper;
                iele.removeClass("up").addClass("down").next().hide();
				if (window.openedselect !== null) {
					$(window.openedselect.$el).append(wraper.hide().children().hide().remove());
				}
                window.openedselect = null;
            },
            "openDropdown": function () {
                var optionsHeight, spaceBelow, spaceAbove, 
				ipt = $(this.$el), iele = ipt.find("i"), oft=ipt.offset(), wraper=document.issSelectWraper,				
                opts = iele.removeClass("down").addClass("up").next();
				opts.css("min-width", ipt.width()).show().appendTo(wraper.show());
				optionsHeight = opts.outerHeight();
				spaceBelow = $(window).height() - ipt.outerHeight() - ipt.offset().top + $(window).scrollTop();
				spaceAbove = ipt.offset().top - $(window).scrollTop();
				if (optionsHeight <= spaceBelow || optionsHeight > spaceAbove) {
					wraper.css({
						"left": oft.left,
						"top" : oft.top + ipt.outerHeight()
					});
					opts.addClass("up").removeClass("down").css("maxHeight", spaceBelow - 20);
				} else {
					wraper.css({
						"left": oft.left,
						"top" : oft.top - optionsHeight - 12
					});
					opts.addClass("down").removeClass("up").css("maxHeight", spaceAbove - 20);
				}
                window.openedselect = this;
			},
			"reset": function() {
				if (!$(this.$el).hasClass("readonly")) {
					this.$emit("changeval", "");
				}
			}
        }
    });
    /*****************************************************************/
		
	/** 级联 */
    Vue.component("IssCascade", {
		"template": '<span class="iss-cascade" @click="emitClick">\
						<input v-model="vvs" readonly="readonly"/><i class="location"></i>\
						<div class="wrap">\
							<span title="关闭" @click="closeDropdown">×</span>\
							<ul></ul>\
							<div class="content"></div>\
						</div>\
					</span>',
        "mixins": [mixin],
		"model": {
            "prop": "vv",
            "event": "changeval"
        },
		"props": {
			"vv": {
                "type": [String, Array],
                "default": ""
            },
			"cols": {
				"type": [String, Number],
                "default": 6
			},
            "datasource": {
				"type": Array,
				"default": function() {
					return _address;
					/*return [
						{
							"CCde": "1",
							"CCnm": "广东省",
							"list": [
								{
									"CCde": "11",
									"CCnm": "广州市",
									"list": [
										{"CCde": "111", "CCnm": "天河区"},
										{"CCde": "112", "CCnm": "白云区"},
										{"CCde": "113", "CCnm": "黄埔区"},
										{"CCde": "114", "CCnm": "越秀区"}
									]
								},
								{
									"CCde": "12",
									"CCnm": "东莞市",
									"list": [
										{"CCde": "121", "CCnm": "东莞区1"},
										{"CCde": "122", "CCnm": "东莞区2"},
										{"CCde": "123", "CCnm": "东莞区3"},
										{"CCde": "124", "CCnm": "东莞区4"}
									]
								}								
							]
						},
						{
							"CCde": "2",
							"CCnm": "江西省",
							"list": [
								{
									"CCde": "21",
									"CCnm": "赣州市",
									"list": [
										{"CCde": "211", "CCnm": "赣州区1"},
										{"CCde": "212", "CCnm": "赣州区2"},
										{"CCde": "213", "CCnm": "赣州区3"},
										{"CCde": "214", "CCnm": "赣州区3"}
									]
								},
								{
									"CCde": "22",
									"CCnm": "抚州市",
									"list": [
										{"CCde": "221", "CCnm": "抚州区1"},
										{"CCde": "222", "CCnm": "抚州区2"},
										{"CCde": "223", "CCnm": "抚州区3"},
										{"CCde": "224", "CCnm": "抚州区4"}
									]
								}							
							]
						},
						{
							"CCde": "3",
							"CCnm": "江西省3",
							"list": [
								{
									"CCde": "31",
									"CCnm": "赣州市3",
									"list": [
										{"CCde": "311", "CCnm": "赣州区31"},
										{"CCde": "312", "CCnm": "赣州区32"},
										{"CCde": "313", "CCnm": "赣州区33"},
										{"CCde": "314", "CCnm": "赣州区33"}
									]
								},
								{
									"CCde": "32",
									"CCnm": "抚州市3",
									"list": [
										{"CCde": "321", "CCnm": "抚州区31"},
										{"CCde": "322", "CCnm": "抚州区32"},
										{"CCde": "323", "CCnm": "抚州区33"},
										{"CCde": "324", "CCnm": "抚州区34"}
									]
								}							
							]
						},
						{
							"CCde": "4",
							"CCnm": "江西省4",
							"list": [
								{
									"CCde": "41",
									"CCnm": "赣州市",
									"list": [
										{"CCde": "411", "CCnm": "赣州区41"},
										{"CCde": "412", "CCnm": "赣州区42"},
										{"CCde": "413", "CCnm": "赣州区43"},
										{"CCde": "414", "CCnm": "赣州区43"}
									]
								},
								{
									"CCde": "42",
									"CCnm": "抚州市",
									"list": [
										{"CCde": "421", "CCnm": "抚州区41"},
										{"CCde": "422", "CCnm": "抚州区42"},
										{"CCde": "423", "CCnm": "抚州区43"},
										{"CCde": "424", "CCnm": "抚州区44"}
									]
								}							
							]
						}					
					];*/
				}
			}
		},
		"data": function() {
			return {
				"_dstype": null,
				"_vs": null
			}
		},
		"computed": {
			"vvs": function() {
				var i=0, k=0, vs, ds=this.datasource, ts=[];
				if (issapi.isValid(this.vv)) {
					if (issapi.getType(this.vv) === "string") {
						vs = this.vv.split(",");
						this._dstype = "string";
					} else if (issapi.getType(this.vv) === "array") {
						vs = this.vv;
						this._dstype = "array";
					}
					outer:for (i=0; i<vs.length; i++) {
						vs[i] = issapi.trim(vs[i]);
						for(k=0; k<ds.length; k++) {
							if (String(ds[k].CCde) === vs[i]) {
								ts.push(ds[k].CCnm);
								ds = ds[k].list;
								continue outer;
							}
						}
						ts = vs;
						break;
					}
					this._vs = vs.slice(0);
					return ts.join("/");
				}
				return "请选择";
			}
		},
		"mounted": function () {
            var ipt=$(this.$el), lst, wraper=document.issCascadeWraper,
			fmt = ipt.closest("table").parent(".iss-form");
			if (fmt.length) {
				if (fmt.hasClass("readonly")) {
					if (!ipt.hasClass("editable")) {
						ipt.addClass("readonly");
					}
				}
			} else {
				lst = ipt.closest("div.iss-list");
				if (lst.hasClass("readonly")) {
					if (!ipt.hasClass("editable")) {
						ipt.addClass("readonly");
					}
				}
			}
            if (!wraper) {
                wraper = document.issCascadeWraper = $('<div></div>').addClass("iss-cascade-wrap");
				$(document.body).append(wraper);
                $(document).on("click", function (e) {
					if (window.openedcascade && 
						$(e.target).closest(".iss-cascade").length === 0 && $(e.target).closest(".iss-cascade-wrap").length === 0) {
						window.openedcascade.closeDropdown();
					}
                });
            }			
        },
        "methods": {
            "emitClick": function (e) {
                var ipt = $(this.$el);
                if (ipt.hasClass("readonly")) {
                    return;
                } else {
                    if (!window.openedcascade) {
                        this.openDropdown();
                    } else {
                        if (window.openedcascade !== this) {
                            window.openedcascade.closeDropdown();
                            this.openDropdown();
                        } else {
                            this.closeDropdown();
                        }
                    }
                }
            },
            "closeDropdown": function () {
                var i=0, v, vs=[], ipt = $(this.$el), lis, iele = ipt.find("i"), 
				wraper=document.issCascadeWraper;
                iele.removeClass("up").addClass("down").next().hide();
				if (window.openedcascade !== null) {
					$(window.openedcascade.$el).append(wraper.hide().children().hide().remove());
				}
                window.openedcascade = null;
				lis = ipt.find(".wrap > ul > li");
				for (i=0; i<lis.length; i++) {
					v = lis.eq(i).attr("value");
					if (!v) {
						return;
					} else {
						vs.push(v);
					}
				}
				this.$emit("changeval", this._dstype === "array" ? vs.join(): vs);
				this.$emit("change", this._dstype === "array" ? vs.join(): vs);
            },
            "openDropdown": function () {
                var that=this, cols=parseInt(this.cols), idx, fn, ds=this.datasource, optionsHeight, spaceBelow, spaceAbove,
				ipt = $(this.$el), iele = ipt.find("i"), oft=ipt.offset(), opts = iele.next(), wraper=document.issCascadeWraper,
				tul=ipt.find(".wrap > ul"), cnt=tul.next();
				opts.show().appendTo(wraper.show());
				optionsHeight = opts.outerHeight();
				spaceBelow = $(window).height() - ipt.outerHeight() - ipt.offset().top + $(window).scrollTop();
				spaceAbove = ipt.offset().top - $(window).scrollTop();
				if (optionsHeight <= spaceBelow || optionsHeight > spaceAbove) {
					wraper.css({
						"left": oft.left,
						"top" : oft.top + ipt.outerHeight()
					});
					opts.addClass("up").removeClass("down").css("maxHeight", spaceBelow - 20);
				} else {
					wraper.css({
						"left": oft.left,
						"top" : oft.top - optionsHeight - 12
					});
					opts.addClass("down").removeClass("up").css("maxHeight", spaceAbove - 20);
				}
                window.openedcascade = this;
				tul.html("");
				cnt.html("");
				if (issapi.isValid(ds)) {
					fn = function(dds, vv) {
						tul.children("li").removeClass("active");
						cnt.children("div").hide();
						var i=0, aa, iidx=-1, tli = $('<li class="active">请选择</li>').appendTo(tul).click(function() {
							if (!$(this).hasClass("active")) {
								$(this).addClass("active").siblings().removeClass("active");
								cnt.children("div").hide().eq(tul.children("li").index(this)).show();
							}
						}),
						cdiv = $('<div></div>').appendTo(cnt).show();
						for (i=0; i<dds.length; i++) {
							aa = $("<a></a>").appendTo(cdiv).attr("value", dds[i].CCde).text(dds[i].CCnm)
								.data("list", dds[i].list).click(function() {
								var pos = cnt.children("div").index($(this).parent()[0]),
								tt = tul.children("li").eq(pos);
								$(this).addClass("active").siblings("a").removeClass("active");
								if (tt.attr("value") !== $(this).attr("value")) {
									tt.attr("value", $(this).attr("value")).text($(this).text());
									tt.nextAll().remove();
									$(this).parent().nextAll().remove();
									if (issapi.isValid($(this).data("list"))) {
										fn($(this).data("list"));
									} else {
										that.closeDropdown();
									}
								}
							});
							if ((i+1)%cols==0) {
								$("<br/>").appendTo(cdiv);
							}
							if (vv === aa.attr("value")) {
								iidx = i;
								aa.addClass("active");
								tli.attr("value", dds[i].CCde).text(dds[i].CCnm);
							}
						}
						return iidx;
					};
					do {
						idx = fn(ds, this._vs ? this._vs.shift() : null);
						if (idx !== -1) {
							ds = ds[idx].list;
						} else {
							break;
						}
					} while(issapi.isValid(this._vs) && issapi.isValid(ds));					
				}			
			},	
			"reset": function() {
				if (!$(this.$el).hasClass("readonly")) {
					this.$emit("changeval", "");
				}
			}
        }
    });
    /*****************************************************************/	
    
	/** 表单 */
    Vue.component("IssForm", {
        "template": '<div class="iss-form" :class="{readonly:readonly}">\
					<table><slot></slot></table>\
				</div>',
		"props": {
			"readonly": {
                "type": Boolean,
                "default": false
            }
		},
		"methods": {
			"reset": function() {
				var ipts = this.$children, j=0;
				for (j=0; j<ipts.length; j++) {
					ipts[j].reset();
				}
			}
		}
    });
    /*****************************************************************/

    /** 行序 */
    Vue.component("IssIndex", {
        "template": '<td :class="{selected:sel}" @click="emitClick"><slot></slot></td>',
        "model": {
            "prop": "select"
        },
        "props": ["select", "index"],
        "watch": {
            "select": function (val) {
                this.sel = ( val === "true" );
            }
        },
        "data": function () {
            return {
                "sel": this.select === "true"
            };
        },
        "mounted": function () {
            var isslistWrapper = $(this.$el).closest("div.iss-list"),
            headWrapper = isslistWrapper.find("div.head-wrapper"),
            selector = headWrapper.find("th.selector");
            if (selector.length) {
                $(this.$el).css("cursor", "pointer");
            }
        },
        "methods": {
            "emitClick": function (e) {
                var datasource, flg=true, idx, isslistWrapper = $(this.$el).closest("div.iss-list"),
                headWrapper = isslistWrapper.find("div.head-wrapper"),
                selector = headWrapper.find("th.selector");
                if (selector.length) {
                    this.sel = !this.sel;
                    datasource = this.$parent.$props.datasource;
                    if (selector.hasClass("more")) {
                        if (!this.sel) {
                            selector.text("全选");
                        } else {
                            idx = this.index || parseInt($(this.$el).text());
                            $.each(datasource, function (i) {
                                if (i !== idx && datasource[i]._select == "false") {
                                    return flg = false;
                                }
                            });
                            if (flg) {
                                selector.text("取消");
                            }
                        }
                    } else if (this.sel) {
                        $.each(datasource, function (i) {
                            datasource[i]._select = "false";
                        });
                    }
                    this.$emit("input", String(this.sel));
                }
                this.$emit("click", e);
            }
        }
    });
    /*****************************************************************/
	
	/** 列表 */
    Vue.component("IssList", {
        "template": '<div>\
        				<div class="iss-list" :class="{readonly:readonly}" style="overflow: auto;">\
							<div class="head-wrapper"><table></table></div>\
							<div class="body-wrapper">\
								<slot></slot>\
							</div>\
							<div class="footer-wrapper" v-if="typeof(gotopage) === \'function\'">\
								<table>\
									<tfoot>\
										<tr>\
											<td>\
												<div class="pagebtn">\
													共 {{total}} 条， {{maxPage}} 页\
													<input type="button" class="page first" title="首页" value=" " \
															@click="_gopage" v-if="maxPage>7"/>\
													<input v-for="p of pageBtns" type="button" v-if="p>0 && p<=maxPage" \
															:class="{page:true, focus:true, pageno: p==pageno}" :value="p" @click="_gopage"/>\
													<input type="button" class="page last" title="尾页"  value=" " \
															@click="_gopage" v-if="maxPage>7"/>\
													<template v-if="maxPage>7">\
													前往 <input class="gopage" type="text" @change="_gopage" @keyup.enter="_gopage" v-if=""/> 页</template>\
												</div>\
											</td>\
										</tr>\
									</tfoot>\
								</table>\
							</div>\
        				</div>\
						<div v-for="(tmpl, index) in dataTmpl" v-if="index==1" class="dialog"><slot name="dialog" :tmpl="tmpl"></slot></div>\
					</div>',
        "props": {
            "datasource": {
                "type": Array,
                "required": true
            },
			"readonly": {
                "type": Boolean,
                "default": true
            },
            "gotopage": Function,
			"pagesize": {
				"type": Number,
				"default": 10
			}
        },
        "data": function () {
            return {
                "total": 0,
                "pageno": 1,
                "pageBtns": [],
                "_delList": [],
                "dataTmpl": [this.datasource.length ? this.datasource.splice(0, 1)[0] : {}]
            };
        },
        "computed": {
            "maxPage": function () {
                return Math.ceil(this.total / Number(this.pagesize));
            }
        },
        "watch": {
            "pageno": function (val) {
                this._setPageBtns();
            },
            "total": function (val) {
                this._setPageBtns();
            },
            "pagesize": function (val) {
                if (val < 1) {
                    this.pagesize = 10;
                }
            }
        },
        "mounted": function () {
            var that = this,
            isslistWrapper = $(that.$el).children(".iss-list"),
            headWrapper = isslistWrapper.find("div.head-wrapper"),
            bodyWrapper = headWrapper.next(),
            footWrapper = bodyWrapper.next(),
            ths = bodyWrapper.find("tr:first th"),
            len = 0, head, sty, height, selector, cls, k=0;
            ths.each(function () {
                var colspan = $(this).attr("colspan");
                len += parseInt(!colspan ? 1 : colspan);
            });
            footWrapper.find("td:first").attr("colspan", len);
            head = bodyWrapper.find("thead");
            head.clone(true).appendTo(headWrapper.find("table"));
			sty = $(that.$el).attr("style");
			if (sty) {
				$(that.$el).removeAttr("style");
				height = /height\s*:(\s*.+?);/.exec(sty);
				if (height) {
					bodyWrapper.attr("style", height[0]);
				}
			}            
            headWrapper.find("th.order").click(that.orderby);
            selector = headWrapper.find("th.selector");
            selector.filter(".more").click(function () {
                if (selector.text() != "取消") {
                    selector.text("取消");
                    $.each(that.datasource, function (i) {
                        that.datasource[i]._select = "true";
                    });
                } else {
                    selector.text("全选");
                    $.each(that.datasource, function (i) {
                        that.datasource[i]._select = "false";
                    });
                }
            });
			if ($(that.$el).attr("class")) {
				cls = $(that.$el).attr("class").split(" ");
				for (k=0; k<cls.length; k++) {
					isslistWrapper.addClass(cls[k]);
				}
				$(that.$el).removeAttr("class");
			}
        },
        "updated": function () {
            this.$nextTick(function () {
                var isslistWrapper = $(this.$el),
                headWrapper = isslistWrapper.find("div.head-wrapper"),
                bodyWrapper = headWrapper.next(),
                pr = headWrapper.width() - bodyWrapper.find("table").width();
                if (pr > 0) {
                    headWrapper.css("paddingRight", pr);
                }
            });
        },
        "methods": {
            "orderby": function (e) { // 实现单击表头排序功能，在需要排序功能的th上配置class="order" or class="order number"
                var th = $(e.target), hc, orderby = th.attr("orderby");
                if (!orderby) {
                    layer.warn("没有指定排序名称。");
                    return;
                }
                th.parents("thead").find("th.order").not(th).removeClass("asc desc");
                hc = th.hasClass("number"); // 是否按数字排序
                if (th.hasClass("asc")) {
                    th.removeClass("asc").addClass("desc");
                    this.datasource.sort(function (a, b) {
                        return hc ? parseFloat(b[orderby]) - parseFloat(a[orderby]) : b[orderby].localeCompare(a[orderby]);
                    });
                } else {
                    th.removeClass("desc").addClass("asc");
                    this.datasource.sort(function (a, b) {
                        return hc ? parseFloat(a[orderby]) - parseFloat(b[orderby]) : a[orderby].localeCompare(b[orderby]);
                    });
                }
            },
            "addData": function (idx, initData) {
                if (isNaN(idx)) {
                    idx = this.datasource.length;
                }
                var that=this, newData = $.extend(true, {_status: "insert", _select: "false"}, this.$data.dataTmpl[0]);
                if ($.isFunction(initData)) {
                	this.$data.dataTmpl.push(newData);
                	this.$nextTick( function () {
	                	initData.call(that, newData, function(yes) {
	                		if (newData !== null) { // 防止layer的关闭事件调用两次
	                			that.$data.dataTmpl.splice(1, 1);
	                			yes && that.datasource.splice(idx + 1, 0, newData);
								that.total += 1;
	                			newData = null;
	                		}
	                	} );
                	} );
                } else {
                	if ($.isPlainObject(initData)) {
                        $.extend(newData, initData);
                    }
                    this.datasource.splice(idx + 1, 0, newData);
                }
            },
            "updData": function (idx, initData) {
            	var that=this, selList = this.getSelList(), idxs = [], modData, newData;
				if (!isNaN(idx) && idx >= 0 && idx < this.datasource.length) {
					idxs.push(idx);
				} else if (selList.length === 1) {					
					idxs.push($.inArray(selList[0], this.datasource));
				} else {
					layer.warn("请选择一条要修改的数据。");	
					return;
				}
                modData = this.datasource[idxs[0]];
                if ($.isFunction(initData)) {
					newData = $.extend(true, {}, modData);
                	this.$data.dataTmpl.push(newData);
                	this.$nextTick( function () {
                		initData.call(that, newData, function(yes) {
							if (newData !== null) { // 防止layer的关闭事件调用两次
	                			that.$data.dataTmpl.splice(1, 1);
	                			yes && $.extend(modData, newData);
	                			newData = null;
	                		}
	                	} );
                	} );
                } else {
					if ($.isPlainObject(initData)) {
                        $.extend(modData, initData);
                    }
				}
            },
			"seeData": function (idx, callback) {
            	var that=this, selList=this.getSelList(), idxs=[], modData;
				if (!isNaN(idx) && idx >= 0 && idx < this.datasource.length) {
					idxs.push(idx);
				} else if (selList.length === 1) {					
					idxs.push($.inArray(selList[0], this.datasource));
				} else {
					layer.warn("请选择一条要查看的数据。");	
					return;
				}
                modData = this.datasource[idxs[0]];
                if ($.isFunction(callback)) {
					Vue.set(modData, "readonly", true);
                	this.$data.dataTmpl.push(modData);
                	this.$nextTick( function () {
                		callback.call(that, modData, function() {
	                		that.$data.dataTmpl.splice(1, 1);
							Vue["delete"](modData, "readonly");
	                	} );
                	} );
                }
            },
            "delData": function (idx, callback, initData) {
				var that=this, selList=this.getSelList(), delData=null, idxs=[], i=0;
				if (!isNaN(idx) && idx >= 0 && idx < this.datasource.length) {
					idxs.push(idx);
				} else if ($.isPlainObject(idx)) {					
					idxs.push($.inArray(idx, this.datasource));
				} else if (selList.length > 0) {					
					for (i=0; i<selList.length; i++) {
						idxs.push($.inArray(selList[i], this.datasource));
					}
				} else {
					layer.warn("请选择要删除的数据。");	
					return;
				}
				layer.confirm("你正在删除选定的数据，确认删除吗？", {title: "删除确认", icon: 3}, function(index) {
					for (i=idxs.length-1; i>=0; i--) {
						var model = initData && $.extend({_status: "insert", _select: "false"}, that.$data.dataTmpl[0], initData);
						if (model) {
							delData = that.datasource.splice(idxs[i], 1, model)[0];
						} else {
							delData = that.datasource.splice(idxs[i], 1)[0];
						}
						if (delData._status !== "insert") {
							delData._status = "delete";
							that.$data._delList.push(delData);
						}
					} 
					layer.close( index );
					if ($.isFunction(callback)) {
						callback.call(that);
					}
				});					
            },
            "getDelList": function (keys) {
				var obj, i=0;
                if (typeof keys === "string") {
                    return $.map(this.$data._delList, function (data) {
                        obj = {};
                        obj[keys] = data[keys];
                        return obj;
                    });
                } else if ($.isArray(keys)) {
                    return $.map(this.$data._delList, function (data) {
                        obj = {};
                        for (i in keys) {
                            obj[keys[i]] = data[keys[i]];
                        }
                        return obj;
                    });
                } else {
                    return this.$data._delList;
                }
            },
            "getSelList": function () {
                return $.map(this.datasource, function (data) {
                    if (data._select === "true") {
                        return data;
                    } else {
                        return null;
                    }
                });
            },
            "_gopage": function (e) {
                var page = e.target.value;
                if ($(e.target).attr("title") === "首页") {
                    page = 1;
                } else if ($(e.target).attr("title") === "尾页") {
                    page = Math.ceil(this.total / Number(this.pagesize));
                }
                if (!/^[\d]+$/.test(page)) {
                    layer.error("请输入数字！");
                } else if (parseInt(page) > this.maxPage) {
                    layer.error("超过最大页码！");
                } else if (parseInt(page) === this.pageno) {
                    layer.error("己在当前页码！");
                } else {
                    this.pageno = parseInt(page);
                    this.gotopage(this.pageno, Number(this.pagesize));
                }
            },
            _setPageBtns: function () { // 设置分页栏的页码按钮
                this.pageBtns = [this.pageno - 3, this.pageno - 2, this.pageno - 1, this.pageno, this.pageno + 1, this.pageno + 2, this.pageno + 3];
                var i=0;
				for (i = 0; i < this.pageBtns.length; i++) {
                    if (this.pageBtns[i] < 1) {
                        this.pageBtns.splice(i--, 1);
                        this.pageBtns.push(this.pageBtns[this.pageBtns.length - 1] + 1);
                    }
                }
                for (i = this.pageBtns.length - 1; i >= 0; i--) {
                    if (this.pageBtns[i] > this.maxPage) {
                        this.pageBtns.splice(i++, 1);
                        this.pageBtns.unshift(this.pageBtns[0] - 1);
                    }
                }
            }
        }
    });
    /*****************************************************************/

	/** 选项卡 */
    Vue.component("IssTabs", {
        "template": '<div class="iss-tabs"><div class="tabs"><slot name="tabs"></slot><hr/></div><slot></slot></div>',
        "props": {
            "type": String,
            "value": String
        },
        "mounted": function () {
            var ipt = $(this.$el);
            ipt.find(".tabs").next().addClass("cnts");
            ipt.on("click", ".tabs span", function () {
                $(this).addClass("active").siblings().removeClass("active");
                var idx = $(this).parents().children().index(this);
                ipt.find(".cnts div").hide().eq(idx).show();
            });
        },
        "methods": {
            "emitClick": function (e) {
                var ipt = $(this.$el);
                if (ipt.hasClass("readonly")) {
                    return;
                } else {
                    this.$emit("click", e);
                }
            }
        }
    });
    /*****************************************************************/
	
	/** 省市区三级联动方案二*/
    Vue.component("IssCity", {
        "template": '<span class="iss-city" ><input class="iss-city" id="city2" :value="value" readonly="readonly" \
					@mouseover="emitClick"/><i class="location"></i></span>',
        "props": {
            "value": String
        },
        "methods": {
            "emitClick": function (e) {
                var ipt = $(this.$el);
                if (ipt.hasClass("readonly")) {
                    return;
                } else {
                    $("#city2").click(function (e) {
                        SelCity(this, e);
                        $("#_citysheng").hide();
                        $("._citys>span").hide();
                    });
                }
            }
        }
    });
    /*****************************************************************/

	/** 保险类型 */
    Vue.component("IssInsurance", {
        "template": '<div class="iss-iinsurance" >\
	                    <input class="iss-insurance selemenu" v-model="text" id="myIput" readonly="readonly" @click="emitClick"/><i class="down"></i>\
	                    <div class="wrap insuranceList">\
	                         <div class="father" v-for="(item,index) of datasource">\
		                         <div class="typeList" @mouseover="fatherClick">{{item.text}}<span></span></div>\
		                         <div v-for="items of item.type" class="son" @mouseover="sonClick">{{items.text}}</div>\
		                     </div>\
	                    </div>\
	               </div>',
        "props": {
            "value": String,
            "datasource": {
                "type": Array,
                "required": true,
            }
        },
        "computed": {
            "text": function () {
				var i;
				for (i in this.datasource) {
					if (this.datasource[i].value === this.value) {
						return this.datasource[i].text;
					}
				}
				return this.value;                
            }
        },
        "methods": {
            "emitClick": function (e) {
                var ipt = $(this.$el), that=this;
                if (ipt.hasClass("readonly")) {
                    return;
                } else {
                    if (!window.openedselect) {
                        this.openDropdown();
                    } else {
                        if (window.openedselect !== this) {
                            window.openedselect.closeDropdown();
                            this.openDropdown();
                        } else {
                            this.closeDropdown();
                        }
                    }
                    $('.iss-iinsurance>.insuranceList').toggle();
                    $(function () {
                        $(document).not($(".iss-iinsurance")).click(function () {
                            $(".insuranceList").hide();
                        });
                        $(".iss-iinsurance").click(function (event) {
                            event.stopPropagation();
                        });
                    });
                    $('.son').dblclick(function () {
                        $('.iss-iinsurance>.insuranceList').hide();
                        that.closeDropdown();
                    });
                }
            },
            "fatherClick": function (e) {
                var ipt=$(this.$el), that=this, fatherClick=$('.insuranceList>.father>.typeList'), i=0, text1;
                for(i=0;i<fatherClick.length;i++){
                    fatherClick[i].onclick=function(){
                        $(this).addClass('active');
                        $(this).parent().siblings().children('.typeList').removeClass('active');
                        $(this).parent().siblings().children('.son').removeClass('_active');
                        text1 = $(this).text();
                        $('#myIput').val(text1);
                    }
                }
            },
            "sonClick": function (e) {
                var ipt=$(this.$el), that=this, sonClick=$('.insuranceList>.father>.son'), i=0, text1;
                for(i=0;i<sonClick.length;i++){
                    sonClick[i].onclick=function(){
                        $(this).addClass('_active');
                        $(this).siblings().removeClass('_active');
                        $(this).parent().siblings().children().removeClass('_active');
                        $(this).siblings('.typeList').addClass('active').siblings().removeClass('active');
                        $(this).siblings('.typeList').addClass('active').parent().siblings().children('.typeList').removeClass('active');
                        text1=$(this).siblings('.typeList').text();
                        $('#myIput').val(text1 + "—" + $(this).text());
                    }
                }
            },
            "closeDropdown": function () {
                var ipt = $(this.$el), iele = ipt.find("i");
                iele.removeClass("up").addClass("down");
                window.openedselect = null;
            },
            "openDropdown": function () {
                var ipt = $(this.$el),iele = ipt.find("i");
                iele.removeClass("down").addClass("up");
                window.openedselect = this;
            }
        }
    });
    /*****************************************************************/
    
    /** 穿梭表 */
    Vue.component("IssShuttle", {
        "template": '<div class="iss-shuttle">\
                         <div v-for="(item,index) of fromdatasource">\
                             <div class="source">\
                                 <div class="sourceTitle">{{item.text1}}</div>\
                                 <div class="sourcedata">\
                                     <div v-for="items of item.type">\
                                         <label class="distance"><i class="i-no"></i><a class="numId" style="display:none;">{{items.id}}</a><a>{{items.text}}</a></label>\
                                     </div>\
                                 </div>\
                             </div>\
                             <div class="btnCtrl">\
                                 <span class="btn-toright"></span>\
                                 <span class="btn-toleft" @click="leftBtn"></span>\
                             </div>\
                             <div class="to">\
                                 <div class="toTitle">{{item.text2}}</div>\
                                 <div class="todata">\
                                     <div v-for="(itemTo,index) of todatasource" @mouseover="emitClick">\
                                         <label class="distance"><i class="i-no"></i><a style="display:none;">{{itemTo.id}}</a><a>{{itemTo.text}}</a></label>\
                                     </div>\
                                 </div>\
                             </div>\
                         </div>\
	                 </div>',
        "props": {
            "value": String,
            "fromdatasource": {
                "type": Array,
                "required": true,
            },
            "todatasource": {
                "type": Array,
                "required": true,
            }
        },
        mounted: function () {
            var ipt = $(this.$el),
                that=this,
                btnRight=$('.iss-shuttle .btn-toright'),
                btnLeft=$('.iss-shuttle .btn-toleft'),
                sourcedata=$('.iss-shuttle .sourcedata').children().children(),
                todata=$('.iss-shuttle .todata').children().children(),
                findI=sourcedata.find('i'),
                findII=todata.find('i'),
                sourceText;
            
            	sourcedata.click(function(){
                    var _this=$(this),id,text;
                    id=($(this).children()[1]).text;
                    text=($(this).children()[2]).text;
                    sourcedata.find('i').removeClass('i-yes');
                    _this.find('i').addClass('i-yes');
                    if(!_this.find('i').hasClass('i-grey')){
                        btnRight.addClass('activeR');
                    }
                    if(_this.find('i').hasClass('i-grey')){
                        layer.warn("此数据已经关联。");
                    }
                    btnRight.click(function(){
                        if(_this.find('i').hasClass('i-yes')&&!_this.find('i').hasClass('i-grey')){
                            _this.addClass('greyColor');
                            _this.find('i').addClass('i-grey').removeClass('i-yes');
                            btnRight.removeClass('activeR');
                            that.todatasource.push({id,text});
                        }
                    });
                });
            btnRight.click(function(){
                if(findI.hasClass('i-yes')){
                    return;
                }else{
                    layer.warn("请在源列表选择一条数据进行关联。");
                }
            });
        },
        methods: {
            leftBtn:function(){
                var todata=$('.iss-shuttle .todata').children().children(),btnLeft=$('.iss-shuttle .btn-toleft');
                if(todata.find('i').length<=0){
                    layer.warn("啊哦，目的列表空空如也。");
                }else if(!btnLeft.hasClass('activeL')){
                    layer.warn("请在目的列表选择一条数据取消关联");
                }
            },
            emitClick: function () {
                var ipt = $(this.$el),
                    that=this,
                    btnLeft=$('.iss-shuttle .btn-toleft'),
                    todata=$('.iss-shuttle .todata').children().children(),
                    sourcedata=$('.iss-shuttle .sourcedata').children().children(),
                    findI=sourcedata.find('i'),
                    append=$('.iss-shuttle .todata').children(),
                    findII=todata.find('i'),
                    dataToLeft;
                todata.click(function(){
                	var _this=$(this),idd,textt,i=0,j=0;
                    todata.find('i').removeClass('i-yes');
                    _this.find('i').addClass('i-yes');
                    if(!_this.find('i').hasClass('i-grey')){
                        btnLeft.addClass('activeL');
                    }
                    btnLeft.click(function(){
                    	idd=(_this.children()[1]).text;
                        textt=(_this.children()[2]).text;
                        if(_this.find('i').hasClass('i-yes')&&!_this.find('i').hasClass('i-grey')){
                            _this.find('i').removeClass('i-yes');
                            btnLeft.removeClass('activeL');
                            for (j = 0; j < that.fromdatasource.length; j++) {
                                that.fromdatasource[j].type.forEach(function(Val, index) {
                                    dataToLeft=sourcedata.parent()[index];
                                    if(idd==Val.id){
                                        dataToLeft.children[0].setAttribute("class","distance");
                                        dataToLeft.children[0].children[0].setAttribute("class","i-no");
                                    }
                                });
                            }
                            for(i=0;i<that.todatasource.length;i++) {
                                if (idd == that.todatasource[i].id) {
                                    that.todatasource.splice(i,1);
                                }
                            }
                        }
                    });
                });
            }
        }
    });
    /*****************************************************************/
});