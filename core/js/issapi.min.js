;"use strict";

define(function(require, exports, module) {

    require("layer");
    require("laydate");
    //require("my97date");
    require("vue");
    require("iss-component");
	/*require("flexible");*/

    layer.config({
    	scrollbar: false
	});
        
    /**
     * 在滚动页面到一定距离时，把菜单固定在页面顶部
     * @param mtop 菜单固定时与顶部的距离
     * @param zindex 菜单的zindex值，默认为 1000
     */
    $.fn.navfix = function(mtop, zindex) {
        var nav = $(this),           
            dftop = nav.offset().top,
            dfcss = [];
		mtop = mtop || 0;
		zindex = zindex || 1000;
        dfcss[0] = nav.css("position"), dfcss[1] = nav.css("top"), dfcss[2] = nav.css("zindex");
        $(window).scroll(function(e) {
            $(this).scrollTop() > (dftop - $(window).scrollTop()) ? nav.css({
                position: "fixed",
                top: mtop + "px",
                "z-index": zindex
            }) : nav.css({
                position: dfcss[0],
                top: dfcss[1],
                "z-index": dfcss[2]
            })
        })
        return $(this);
    };

    /**
     * 请求成功回调方法 (内部方法)
     * @param options 配置选项 (传递进来，避免多次调用request方法时出现引用错误)
     * @param jqXHR XMLHttpRequest
     * @param textStatus "success", "notmodified", "error", "timeout", "abort", or "parsererror" 
     * @param response 服务器返回数据 json对象
     */
    var _onSuccess = function(options, jqXHR, textStatus, response) {

        if ($.isFunction(options.onSuccess)) {

            // 回调自定义的成功处理方法
            options.onSuccess(jqXHR, textStatus, response);

        }

    },

    /**
     * 请求失败回调方法 (内部方法)
     * @param options 配置选项 (传递进来，避免多次调用request方法时出现引用错误)
     * @param jqXHR XMLHttpRequest
     * @param textStatus "success", "notmodified", "error", "timeout", "abort", or "parsererror"
     * @param response 服务器返回数据 json对象
     */
    _onError = function(options, jqXHR, textStatus, response) {
        
        var errorMsg = response.message,
            errorMsgDtl = response.detail_message;
        if ($.isFunction(options.onError)) {
            options.onError(jqXHR, textStatus, response);
        } else {
            layer.error(errorMsg ? (errorMsg + (errorMsgDtl ? "<br/><br/>"+errorMsgDtl : "")) : "发生异常，请稍候重试");
        }
		
    };

    /**
     * 导出issapi用于全局对象，对外提供一系列功能api
     */
    window.issapi = module.exports = {

        // Browser environment sniffing
        browser: (function() {
            var inBrowser = typeof window !== 'undefined',
            inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform,
            weexPlatform = inWeex && WXEnvironment.platform.toLowerCase(),
            UA = inBrowser && window.navigator.userAgent.toLowerCase(),
            isIE = UA && /msie|trident/.test(UA),
            isIE9 = UA && UA.indexOf('msie 9.0') > 0,
			isIE11 = UA && UA.indexOf('rv:11.0') > 0,
            isEdge = UA && UA.indexOf('edge/') > 0,
            isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android'),
            isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios'),
            isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
            return {
                inBrowser: inBrowser,
                inWeex: inWeex,
                isIE: isIE,
                isIE9: isIE9,
				isIE11: isIE11,
                isEdge: isEdge,
                isAndroid: isAndroid,
                isIOS: isIOS,
                isChrome: isChrome
            };
        })(),

        // 常量表
        consts: {
            STATUS_SUCCESS: "0",
            STATUS_ERROR: "-1",
            STATUS_NORMAL: "normal",
            STATUS_INSERT: "insert",
            STATUS_UPDATE: "update",
            STATUS_DELETE: "delete",
            UID: 0
        },

        /**
         * 应用上下文路径
         */
        appCxtPath: function() {
            var cxtPath = "/";
            $(document).find("script").each(function() {
                var idx = this.src.indexOf("/core/js/");
                if (idx != -1) {
                    cxtPath = this.src.substring(0, idx);
                    return false;
                }
            });
            return cxtPath;
        }(),

        uploadPath: "/upload",
        
        downloadPath: "/download",
        
        deletePath: "/delete",
        
        importPath: "/import",
        
        exportPath: "/export",
        
        imageExtention: ".jpg,.bmp,.gif,.png",
        
        /**
         * 验证对象不为空或undefined, 字符串长度大于0
         */
        isValid: function(val) {
            if (val != null && val != undefined) {
                var xtype = this.getType(val);
                if (xtype == "array") {
                    return val.length > 0;
                } else if (xtype == "string") {
                    return val.replace(/(^\s*)|(\s*$)/g, "").length > 0;
                } else {
                    return true;
                }
            }
            return false;
        },

        /**
         * 去除左右两边的空白字符
         */
        trim: function(val) {
            if (this.isValid(val)) {
                return String(val).replace(/(^\s*)|(\s*$)/g, "");
            }
            return "";
        },

        /**
         * 把数字转换成有指定小数位的数字
         * @param: num 待转换数字
         * @param: prec 小数位数
         * @return 具有指定小数位数的数字
         */
        numfix: function(num, prec) {
            if ($.isNumeric(num) && Number(prec) > 0) {
                return Number(num).toFixed(prec);
            } else {
                return num;
            }
        },		
			
		/** 
		 * 对Date的扩展，对当前日期进行加减，返回新的日期对象
		 * @param type 指定要进行加减的类型，y/M/d/h/m/s
		 * @num 需要加减的值，加为正数，减为负数
		 * eg: 
		 * new Date("2018-01-01").diff("y", 1)==> 2019-01-01  
		 * new Date("2018-01-01").diff("y", -1)==> 2017-01-01     
		 * new Date("2018-01-01").diff("M", 1)==> 2018-02-01       
		 * new Date("2018-01-01").diff("M", -2)==> 2017-11-01  
		 */
		diff: function(date, type, num) {
			if (!this.isValid(date)) {
				return date;
			}
			if (this.getType(date) !== "date") {
				date = new Date(date);
			}
			return date.diff(type, num);
		},

		 //用于hh:mm格式的时间字串进行加减
		timeDiff:function(date, type, num){
			if (!this.isValid(date)) {
				return date;
			}
			var t = new Date(),
			hm = date.split(":");
			t.setHours(hm[0]);
			t.setMinutes(hm[1]);
			return t.diff(type, num);
		},
		
		// 刷新系统时间
		refreshSysTime: function() {
			setInterval(function() {
				var date = new Date( sysDate + ( new Date().getTime() - localDate) ),
					y = date.getFullYear(), m = date.getMonth() + 1, d = date.getDate(), dd = date.getDay(),
					h = date.getHours(), m1 = date.getMinutes(), s = date.getSeconds(),
					w =  ["日 ", "一", "二", "三", "四 ", "五 ", "六 "];
				m = (m<10?("0"+m):m); d = (d<10?("0"+d):d);
				$("div.systime span").text(y + "/" + m + "/" + d + "周" + w[dd])
					.next().text((h<10?("0"+h):h) + ":" + (m1<10?("0"+m1):m1) + ":" + (s<10?("0"+s):s) );
			}, 1000);
		},
		
        /**
         * 获取对象的数据类型：小写名称
         */
        getType: function(obj) {
            var proto = Object.prototype,
            serialize = proto.toString,
            class2type = {},
            tt = ["Boolean", "Number", "String", "Function", "Array", "Date", "RegExp", "Object", "Error"],
			i = 0;
            for (i = 0; i < tt.length; i++) {
                class2type["[object " + tt[i] + "]"] = tt[i].toLowerCase();
            }
            if (obj == null) {
                return String(obj)
            }
            // 早期的webkit内核浏览器实现了已废弃的ecma262v4标准，可以将正则字面量当作函数使用，因此typeof在判定正则时会返回function
            return typeof obj === "object" || typeof obj === "function" ?
                class2type[serialize.call(obj)] || "object" : typeof obj;
        },

		/**
		 * 文件上传，使用方式：issapi.uploadFile({}, callback);		 
		 * @param options 选项
		 * 			options.files: [file1, file2]
		 * 			options.enableDelete: true
		 * @param callback 上传对话框关闭后的回调方法(files, newlist, dellist)
		 */
		upload: function(options, callback, delCallback) {
			options.files = options.files ? options.files : [];
			var perlist = [], totallist = options.files || [], dellist = [], newlist = [], uploader, uploadDialog = $("#upload_dialog");
			options.max_number = isNaN(parseInt(options.max_number)) ? Number.MAX_VALUE : parseInt(options.max_number);
			if (uploadDialog.length === 0) {
				uploadDialog = $('<div id="upload_dialog" class="dialog"><ol style="list-style: none;"></ol></div>').appendTo($(".main .ccontain"));
			}
				
			layer.open( {
				type: 1,
				title: "文件上传",
				area: ["1020px", "500px"],
				content: $("#upload_dialog"),
				shadeClose: false,
				scrollbar: false,
				btn: [ "选择文件", "开始上传", "关闭" ],
				btn1: function(index, layero) {
					return false; // 取消默认的关闭窗口事件
				},
				btn2: function(index, layero) {
					if (uploader.files.length) {
						uploader.start(); //调用实例对象的start()方法开始上传文件
					} else {
						layer.warn("请选择需要上传的文件");
					}
					return false;
				},
				end: function() {
					var filelist = uploadDialog.find("ol");
					filelist.children().remove();
					uploader.destroy();
					uploader = null;
					if ($.isFunction(callback)) {
						callback(totallist, newlist, dellist);
					}
				}
			} );

			var primaryDel = function() {
				// 处理移除
				var fileKey = $(this).prev("a").attr("title");
				$.each(totallist, function(i, v){
					if(v == fileKey){
						dellist.push(v);
						totallist.splice(i, 1);
					}
				});
				$(this).parent().parent().remove();
				// 删除按钮的回调
				if ($.isFunction(delCallback)) {
					var flag = delCallback(totallist, dellist);
					// 业务操作成功
					/*
					删除服务器图片
		            issapi.post({
		                url: issapi.appCxtPath + issapi.deletePath + '?key=' + fileKey,
		                onSuccess: function(jqXHR, textStatus, response) {
		                	layer.ok('操作成功');
		                },
		                function(jqXHR, textStatus, data){
		                	layer.ok('操作成功');
		                }
		            });*/
				}
			};
			var nowDel = function(){
				/*
				删除服务器图片
	            issapi.post({
	                url: issapi.appCxtPath + issapi.deletePath + '?key=' + fileKey,
	                onSuccess: function(jqXHR, textStatus, response) {
	                	layer.ok('操作成功');
	                },
	                function(jqXHR, textStatus, data){
	                	layer.ok('操作成功');
	                }
	            });*/
	            // 处理移除
				var fileKey = $(this).prev("a").attr("title"), delflg;
				$.each(totallist, function(i, v){
					if(v == fileKey){
						dellist.push(v);
						totallist.splice(i, 1);
						delflg = true;
					}
				});
				$.each(newlist, function(i, v){
					if(v == fileKey){
						!delflg && dellist.push(v);
						newlist.splice(i, 1);
					}
				});
				$(this).parent().parent().remove();
			};
			var i=0, filelist = uploadDialog.find("ol");
			for(i=0; i<options.files.length; i++){
				var rname = options.files[i];
				var extention = rname.substring(rname.lastIndexOf(".") + 1).toLowerCase();
				if(issapi.imageExtention.indexOf(extention) > -1){
					$('<li style="float:left;margin: 15px;"><div style="text-align:center;position:relative;" >\
							<a href="'+issapi.appCxtPath + issapi.downloadPath + '?key=' + rname + '" title="'+rname+'">\
							<img style="width:80px;max-height:80px;" src="'+issapi.appCxtPath + issapi.downloadPath + '?key=' + rname + '"/>\
							</a>\
							<img class="del" style="position:absolute;right:-8px;top:-8px;width:20px;cursor:pointer;" title="删除" src="'+issapi.appCxtPath+'/core/theme/default/img/close_.png"/>\
							</div></li>')
					.appendTo(filelist).find(".del").click(primaryDel);
				} else {
					// 不是图片
					$('<li style="float:left;margin: 15px;"><div style="text-align:center;position:relative;" >\
							<a href="'+issapi.appCxtPath + issapi.downloadPath + '?key=' + rname + '" title="'+rname+'">\
							<div style="width:80px;height:80px;background: url('+issapi.appCxtPath+'/core/theme/default/img/filebg/file.png) center no-repeat;"></div>\
							</a>\
							<img class="del" style="position:absolute;right:-8px;top:-8px;width:20px;cursor:pointer;" title="删除" src="'+issapi.appCxtPath+'/core/theme/default/img/close_.png"/>\
							</div></li>')
					.appendTo(filelist).find(".del").click(primaryDel);
				}
			}
			
			uploader = new plupload.Uploader($.extend({
				browse_button : $("#layui-layer"+layer.index).find(".layui-layer-btn0")[0], // 触发文件选择对话框元素id或dom
				url : this.appCxtPath + this.uploadPath, // 服务器端接受上传的地址
				flash_swf_url : this.appCxtPath + '/core/js/lib/plupload-3.0-beta1/Moxie.swf',
				silverlight_xap_url : this.appCxtPath + '/core/js/lib/plupload-3.0-beta1/Moxie.xap'
			}, $.isPlainObject(options)? options: {}));

			uploader.init();

			uploader.bind('Init', function(uploader, file) { // 初始化完成后触发
								
			});
			uploader.bind('FilesAdded', function(uploader, files) { // 添加文件
				var i=0, filelist = uploadDialog.find("ol");
				// 所有的文件个数：已有的队列，已经上传的图片，页面给的图片的总和
				var filesize = uploadDialog.find("ol li").length;
				//var queue = uploader.total.queued; // 刚刚选中的文件的数量
				var options = uploader.getOption(); // 拿到页面所有的属性配置
				var max_number = options.max_number; // 页面指定的附件数量
								
				// 判断文件个数。
				if(filesize > max_number){
					uploader.files = [];
					layer.warn('上传的文件数量不能超过:'+max_number);
					return false;
				} else {
					if(filesize + files.length > max_number){
						uploader.files = [];
						layer.warn('上传的文件数量不能超过:'+max_number);
						return false;
					}
				}
				
				for (i=0; i<files.length; i++) {
					$("<li><div fid="+files[i].id+"><span>" + files[i].name + "</span> - <a href='javascript:void(0);' fid='" + files[i].id + "'>删除</a></li>")
					.appendTo(filelist).find("a").click(function(){
						uploader.removeFile($(this).attr("fid"));
						$(this).parent().parent().remove();
					});
				}
			});
			uploader.bind('UploadProgress', function(uploader, file) { // 一个文件的上传进度
				
			});
			uploader.bind('FileUploaded', function(uploader, file, result) { // 上传完成一个文件
				var filelist = uploadDialog.find("ol");
				if (result.status === 200) {
					if (result.response.indexOf("<!DOCTYPE html>") !== -1) {
						layer.warn("登录超时，请重新登录");
						setTimeout( function() {
							location.href = issapi.appCxtPath;
						}, 1000 );							
						return;
					}
					result = JSON.parse(result.response);
					if (result.status === "0") {
						var rname = result.key;
						var extention = rname.substring(rname.lastIndexOf(".") + 1).toLowerCase();
						filelist.find("li div[fid='"+file.id+"']").parent().remove();
						if(issapi.imageExtention.indexOf(extention) > -1){
							$('<li style="float:left;margin: 15px">\
									<div style="text-align:center;position:relative;" >\
									<a href="'+issapi.appCxtPath + issapi.downloadPath + '?key=' + rname + '" title="'+rname+'">\
									<img style="width:80px;max-height:80px;" src="'+issapi.appCxtPath + issapi.downloadPath + '?key=' + rname + '"/>\
									</a>\
									<img class="del" style="position:absolute;right:-8px;top:-8px;width:20px;cursor:pointer;" title="删除" src="'+issapi.appCxtPath+'/core/theme/default/img/close_.png"/>\
									</div></li>')
							.appendTo(filelist).find(".del").click(nowDel);
						} else {
							// 不是图片
							$('<li style="float:left;margin: 15px;"><div style="text-align:center;position:relative;" >\
									<a href="'+issapi.appCxtPath + issapi.downloadPath + '?key=' + rname + '" title="'+rname+'">\
									<div style="width:80px;height:80px;background: url('+issapi.appCxtPath+'/core/theme/default/img/filebg/file.png) center no-repeat;"></div>\
									</a>\
									<img class="del" style="position:absolute;right:-8px;top:-8px;width:20px;cursor:pointer;" title="删除" src="'+issapi.appCxtPath+'/core/theme/default/img/close_.png"/>\
									</div></li>')
							.appendTo(filelist).find(".del").click(nowDel);
						}
						perlist.push(result.key);
						newlist.push(result.key);
					} else {
						filelist.find("a[fid='"+file.id+"']").parent().append(' - <span style="color: #f00;">上传失败！('+result.message+')</span>');
					}
				} else {
					filelist.find("a[fid='"+file.id+"']").parent().append(' - <span style="color: #f00;">上传失败！('+result.status+')</span>');
				}
				
			});
			uploader.bind('UploadComplete', function(uploader) {
				var i;
				for (i=uploader.files.length-1; i>=0; i--) {
					uploader.removeFile(uploader.files[i].id);
				}
				if (perlist.length) {
					totallist = totallist.concat(perlist);
					perlist = [];
					layer.ok("文件上传完成");
				}
			});
			uploader.bind('Error', function(uploader,errObject) {
				layer.warn(errObject.file.name + "：" + errObject.message);
			});
		},
		
		/**
		 * 文件下载，使用方式：issapi.download(key, dir);
		 * @param key 需要下载的文件key，通常由上传接口调用成功后返回
		 * @param dir 从webroot相关目录中下载，当没有指定时，从服务器上配置的upload.path目录中下载
		 */
		download: function(key, dir) {			
			if (key) {
				window.open( issapi.appCxtPath + issapi.downloadPath + "?key=" + key + "&dir=" + (!!dir? dir : "") );
			} else {
				layer.warn("请指定要下载的文件");
			}
		},
		
		/**
		 * 数据导入，使用方式：issapi.importData({}, callback);		 
		 * @param options 选项
		 * @param callback 导入对话框关闭后的回调方法
		 */
		importData: function(options, callback) {
			
			var perlist = [], totallist = [], uploader, uploadDialog = $("#upload_dialog");
			
			if (uploadDialog.length === 0) {
				uploadDialog = $('<div id="upload_dialog" class="dialog"><ol></ol></div>').appendTo($(".main .ccontain"));
			}
				
			layer.open( {
				type: 1,
				title: "Excel数据导入",
				area: ["700px", "400px"],
				content: $("#upload_dialog"),
				shadeClose: false,
				scrollbar: false,
				btn: [ "选择Excel文件", "开始导入", "模板下载", "关闭" ],
				btn1: function(index, layero) {
					return false;
				},
				btn2: function(index, layero) {
					if (uploader.files.length) {
						uploader.start(); //调用实例对象的start()方法开始上传文件
					} else {
						layer.warn("请选择需要导入的Excel文件");
					}
					return false;
				},
				btn3: function(index, layero) {
					if (options.template) {
						issapi.download(options.template, "template");
					} else {
						layer.warn("请设置模板名称");
					}
					return false;
				},
				end: function() {
					var filelist = uploadDialog.find("ol");
					filelist.children().remove();
					uploader.destroy();
					uploader = null;
					if ($.isFunction(callback)) {
						callback(totallist);
					}
				}
			} );
			
			uploader = new plupload.Uploader($.extend({
				browse_button : $("#layui-layer"+layer.index).find(".layui-layer-btn0")[0], // 触发文件选择对话框元素id或dom
				url : this.appCxtPath + this.importPath, // 服务器端接受上传的地址
				flash_swf_url : this.appCxtPath + '/core/js/lib/plupload-3.0-beta1/Moxie.swf',
				silverlight_xap_url : this.appCxtPath + '/core/js/lib/plupload-3.0-beta1/Moxie.xap'
			}, $.isPlainObject(options)?options:{}));
			
			uploader.init();

			uploader.bind('FilesAdded',function(uploader, files) { // 添加文件
				var i=0, filelist = uploadDialog.find("ol");
				for (i=0; i<files.length; i++) {
					$("<li><span>" + files[i].name + "</span> - <a href='javascript:void(0);' fid='" + files[i].id + "'>删除</a></li")
					.appendTo(filelist).find("a").click(function(){
						uploader.removeFile($(this).attr("fid"));
						$(this).parent().remove();
					});
				}
			});
			uploader.bind('UploadProgress',function(uploader, file) { // 一个文件的上传进度
				
			});
			uploader.bind('FileUploaded',function(uploader, file, result) { // 上传完成一个文件
				var filelist = uploadDialog.find("ol");
				if (result.status === 200) {
					if (result.response.indexOf("<!DOCTYPE html>") !== -1) {
						layer.warn("登录超时，请重新登录");
						setTimeout( function() {
							location.href = issapi.appCxtPath;
						}, 1000 );							
						return;
					}
					result = JSON.parse(result.response);
					if (result.status === "0") {
						filelist.find("a[fid='"+file.id+"']").replaceWith('<span style="color: #f00;">'+(result.message?result.message:'导入成功！')+'</span>');
						perlist.push({name: file.name, key: result.key});
					} else {
						filelist.find("a[fid='"+file.id+"']").parent().append(' - <span style="color: #f00;">'+(result.message?result.message:'导入失败！')+'</span>');
					}
				} else {
					filelist.find("a[fid='"+file.id+"']").parent().append(' - <span style="color: #f00;">导入失败！('+result.status+')</span>');
				}
				
			});
			uploader.bind('UploadComplete',function(uploader) {
				var i;
				for (i=uploader.files.length-1; i>=0; i--) {
					uploader.removeFile(uploader.files[i].id);
				}
				if (perlist.length) {
					totallist = totallist.concat(perlist);
					perlist = [];
					layer.ok(options.completeMsg ? options.completeMsg : "文件导入完成");
				}
			});
			uploader.bind('Error',function(uploader,errObject) {
				layer.warn(errObject.file.name + "：" + errObject.message);
			});
		},
		
		/**
		 * 数据导出，使用方式：issapi.exportData({});		 
		 * @param options 选项
		 */
		exportData: function(options) {
			
			layer.confirm("导出当前的数据，确认吗？", {title: "导出确认", icon: 3}, function(index) {				
				issapi.post( $.extend({
					url: issapi.exportPath,
					onSuccess: function(jqXHR, textStatus, response) {
						layer.close( index );
						issapi.download(response.data, "export");
					}
				}, options) );
			});
			
		},
		
        /**
         * 前后台交互方法，使用方式：issapi.post( {} );
         * 
         * @param
         *		options { // 通常开发人员只需要提供以下三个参数
         * 			model: {}, 数据模型
         * 			onSuccess: function(jqXHR, textStatus, data) {}, 成功回调
         * 			onError: function(jqXHR, textStatus, data) {} 失败回调
         *		}
         * @return Deferred Object
         */
        post: function(options) {
            options = $.extend({

                // 请求路径
                url: "/api",

                // 是否异步请求
                async: true,

                // 请求数据
                data: {},

                // 显示进度
                loading: true,

                // 后台action接口：action.method
                method: "",

                pageno: 1,

                pagesize: 10,

                // 后台返回的数据类型
                dataType: "text",

                /**
                 * 请求失败回调方法
                 * @param jqXHR XMLHttpRequest
                 * @param testStatus "success", "notmodified", "error", "timeout", "abort", or "parsererror"
                 * @param data 服务器返回数据 json对象
                 
                onError : function(jqXHR, textStatus, data) {

                },*/

                /**
                 * 请求成功回调方法
                 * @param jqXHR XMLHttpRequest
                 * @param testStatus "success", "notmodified", "error", "timeout", "abort", or "parsererror" 
                 * @param data 服务器返回数据 json对象
                 */
                onSuccess: function(jqXHR, textStatus, data) {

                }

            }, options);

            if (options.url && options.url.indexOf(this.appCxtPath + "/") != 0) {
                // 不是以上下文路径开头的，则补充上上下文路径 this.appCxtPath + "/" 为了区别 url带了上下文同名的字符
                options.url = this.appCxtPath + options.url;
            }

            var _load_index, _load_timer, 
			md = {
                "method": options.method,
                "pageno": options.pageno,
                "pagesize": options.pagesize,
                "data": {}
            };

            if (options.data) {
                md.data = options.data;
            }
            
            return $.ajax(options.url, {

                async: options.async,

                type: "get",

                contentType: "application/x-www-form-urlencoded; charset=UTF-8",

                dataType: options.dataType,

                data: JSON.stringify(md),

                beforeSend: function(jqXHR, settings) {

                    // 显示进度动画
                    if (options.loading) {
                    	_load_timer = setTimeout(function() { // 超过一秒的请求才显示进度
                        	_load_index = layer.load();
                        }, 1000);
                    }
                },

                success: function(data, textStatus, jqXHR) {

					if (options.loading) {
                        // 关闭进度动画
                    	_load_timer != null && clearTimeout(_load_timer);

                        _load_index != null && layer.close(_load_index);
						
						_load_timer = _load_index = null;
						
                    }
					
                    var outputModel = null;

                    try {

                        outputModel = JSON.parse(jqXHR.responseText);

                    } catch (e) {
						if (jqXHR.responseText.indexOf("<!DOCTYPE html>") !== -1) {
							layer.warn("登录超时，请重新登录");
							setTimeout( function() {
								location.href = issapi.appCxtPath;
							}, 1000 );							
							return;
						}

                        // 回调错误处理方法
                        _onError(options, jqXHR, "parsererror", {
                            message: "解析服务器返回数据失败（" + e + "），请联系管理员！",
                            detail_message: "返回数据为: " + jqXHR.responseText
                        });

                        return;

                    }
                    if (outputModel.status == issapi.consts.STATUS_SUCCESS) {

                        // 回调成功处理方法
                        _onSuccess(options, jqXHR, "success", outputModel);

                    } else {

                        // 回调错误处理方法	
                        _onError(options, jqXHR, "error", outputModel);

                    }
                },

                error: function(jqXHR, textStatus, errorThrown) {
					if (options.loading) {
                        // 关闭进度动画
                    	_load_timer != null && clearTimeout(_load_timer);

                        _load_index != null && layer.close(_load_index);
						
						_load_timer = _load_index = null;
						
                    }
                    // 回调错误处理方法
                    _onError(options, jqXHR, textStatus, { message: errorThrown });

                },

                complete: function() {

                    if (options.loading) {
                        // 关闭进度动画
                    	_load_timer != null && clearTimeout(_load_timer);

                        _load_index != null && layer.close(_load_index);
						
						_load_timer = _load_index = null;
                    }
                }
            });
        },

        getDict: function(dictType, m) {
            var _data = null,
            dataModel = {
                async: false,
                method: "dictAction.getBaseCodeOptions",
                data: {
                    CType: dictType
                },
                onSuccess: function(jqXHR, textStatus, response) {
                    if (response.data) {
                        _data = response.data;
                    } else {
                        _data = {};
                    }
                },
                onError: function(jqXHR, textStatus, response) {
                    _data = null;
                }
            };
            if (m) {
                dataModel = $.extend(dataModel, m);
            }
            this.post(dataModel);
            return _data;
        },

        getArea: function(type, m) {
            var _data = null,
            dataModel = {
                async: false,
                method: "dictAction.getAreaList",
                data: {
                    CParentCde: type
                },
                onSuccess: function(jqXHR, textStatus, response) {
                    if (response.data) {
                        _data = response.data;
                    } else {
                        _data = {};
                    }
                },
                onError: function(jqXHR, textStatus, response) {
                    _data = null;
                }
            };
            if (m) {
                dataModel = $.extend(dataModel, m);
            }
            this.post(dataModel);
            return _data;
        },

        open: function(url, title) {
        	$.ajax( {
        		url: url,
        		dataType: "html",
        		success: function(data, textStatus, jqXHR) {
        			if (data.indexOf("<!DOCTYPE html>") !== -1) {
						layer.warn("登录超时，请重新登录");
						setTimeout( function() {
							location.href = issapi.appCxtPath;
						}, 1000 );							
						return;
					}
                	$("#contain").html(data);
                    if (issapi.isValid(title)) {
                        $("#path").find("li").removeClass("last").end().append($('<li class="last"></li>').text(title).attr("url", url));
                    }
                    //$("body").animate({ scrollTop: 0, scrollLeft: 0 }, 10);
                },
                error: function(jqXHR, textStatus, errorThrown) {
                	$("#contain").html(errorThrown);
                }
        	} );
        },

        back: function(url) {
            $("#path li:last").prev().addClass("last").end().remove();
            this.open(url);
        },

        init: function(subSysCde) {
            issapi.post({
                url: "/static/js/menu-list.js",
            	//method: "menuAction.getMenuData",
            	data: {
            		subSysCde: subSysCde || "" // 子系统代码，用于取菜单时使用
            	},
                onSuccess: function(jqXHR, textStatus, response) {
                    var menuList = response.data.menuList,
                    head = $('<div class="head"></div>'), i=0, j=0, menu, span, pt, smenu, spt, max=0;
                    for (i = 0; i < menuList.length; i++) {
                        menu = menuList[i];
                        span = $("<span></span>").appendTo(head);
                        pt = $('<p class="title"></p>').text(menu.label).appendTo(span);
                        if (issapi.isValid(menu.url)) {
                            pt.attr("url", menu.url);
                        }

                        if (issapi.isValid(menu.subMenu)) {
							if (menu.subMenu.length > max) {
								max = menu.subMenu.length;
							}
                            for (j = 0; j < menu.subMenu.length; j++) {
                                smenu = menu.subMenu[j];
                                spt = $('<p></p>').text(smenu.label).appendTo(span);
                                if (issapi.isValid(smenu.url)) {
                                    spt.attr("url", smenu.url);
                                }
                            }
                        }
                    }
                    head.appendTo($("#menu"));
					max = max * 30 + 50;
					$("#menu").mouseover(function() {
						$(this).height(max).find("span").height(max);
					}).mouseout(function() {
						$(this).height(40);
					});

                    function leftright() {
                        var head = $("#menu .head"),
                        toleft = $("#menu .toleft"),
                        toright = $("#menu .toright"),
                        ftop = head.find("span:not(.hidden):first").offset().top,
                        ltop = head.find("span:last").offset().top;
                        if (ftop != ltop) {
                            toright.css("visibility", "visible");
                        } else {
                            toright.css("visibility", "hidden");
                        }
                        if (head.find("span:first").filter(".hidden").length == 0) {
                            toleft.css("visibility", "hidden");
                        } else {
                            toleft.css("visibility", "visible");
                        }
                    }

                    $("#menu .toleft").css("visibility", "hidden").click(function() {
                        $("#menu .head").find("span.hidden:last").removeClass("hidden");
                        leftright();
                    });

                    $("#menu .toright").click(function() {
                        $("#menu .head").find("span:not(.hidden):first").addClass("hidden");
                        leftright();
                    });

                    leftright();
					
					$("#contain").css("minHeight", $(document).height() - $("#contain").offset().top - 50);
                }
            });
        }

    };

    /** 
     * 对Date的扩展，将 Date 转化为指定格式的String * 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q)
     * 可以用 1-2 个占位符 * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)
     * eg: 
     * new Date().format("yyyy-MM-dd hh:mm:ss.S")==> 2006-07-02 08:09:04.423      
     * new Date().format("yyyy-MM-dd E HH:mm:ss") ==> 2009-03-10 二 20:09:04      
     * new Date().format("yyyy-MM-dd EE hh:mm:ss") ==> 2009-03-10 周二 08:09:04      
     * new Date().format("yyyy-MM-dd EEE hh:mm:ss") ==> 2009-03-10 星期二 08:09:04      
     * new Date().format("yyyy-M-d h:m:s.S") ==> 2006-7-2 8:9:4.18      
     */
    Date.prototype.format = function(fmt) {
        var k, o = {
            "M+": this.getMonth() + 1, //月份
            "d+": this.getDate(), //日
            "h+": this.getHours() % 12 == 0 ? 12 : this.getHours() % 12, //小时
            "H+": this.getHours(), //小时
            "m+": this.getMinutes(), //分
            "s+": this.getSeconds(), //秒
            "q+": Math.floor((this.getMonth() + 3) / 3), //季度
            "S": this.getMilliseconds() //毫秒
        },
        week = {
            "0": "/u65e5",
            "1": "/u4e00",
            "2": "/u4e8c",
            "3": "/u4e09",
            "4": "/u56db",
            "5": "/u4e94",
            "6": "/u516d"
        };
        if (/(y+)/.test(fmt)) {
            fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
        }
        if (/(E+)/.test(fmt)) {
            fmt = fmt.replace(RegExp.$1, ((RegExp.$1.length > 1) ? (RegExp.$1.length > 2 ? "/u661f/u671f" : "/u5468") : "") + week[this.getDay() + ""]);
        }
        for (k in o) {
            if (new RegExp("(" + k + ")").test(fmt)) {
                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            }
        }
        return fmt;
    };
	
	/** 
     * 对Date的扩展，对当前日期进行加减，返回新的日期对象
     * @param type 指定要进行加减的类型，y/M/d/h/m/s
	 * @num 需要加减的值，加为正数，减为负数
     * eg: 
     * new Date("2018-01-01").diff("y", 1)==> 2019-01-01  
     * new Date("2018-01-01").diff("y", -1)==> 2017-01-01     
     * new Date("2018-01-01").diff("M", 1)==> 2018-02-01       
     * new Date("2018-01-01").diff("M", -2)==> 2017-11-01  
     */
	Date.prototype.diff = function(type, num) {
		if ("y" === type) {
			this.setFullYear(this.getFullYear() + num);
		} else if ("M" === type) {
			this.setMonth(this.getMonth() + num);
		} else if ("d" === type) {
			this.setDate(this.getDate() + num);
		} else if ("H" === type) {
			this.setHours(this.getHours() + num);
		} else if ("m" === type) {
			this.setMinutes(this.getMinutes() + num);
		} else if ("s" === type) {
			this.setSeconds(this.getSeconds() + num);
		}
		return this;
	};

    $(function() {

        $("#logout").click(function() {
            layer.confirm("你确认退出系统吗?", { title: "系统提示", icon: 3 }, function(index) {
                location.href = "j_spring_security_logout";
            });
        });

        $("#menu").on("click", "p", function(e) {
            var url = $(this).attr("url");
            if (issapi.isValid(url)) {
                $("#path li:gt(0)").remove();
                $("#path").append("<li>" + $(this).siblings(".title").text() + "</li>");
                $("#menu").css({ height: 40, borderBottom: "none" });
                issapi.open(url, $(this).text());
            }
        }).mouseover(function() {
            $(this).removeAttr("style").slideDown("normal");
        });

        $("#path").on("click", "li[url]:not(:last-child)", function() {
            $(this).addClass("last").nextAll().remove();
            issapi.open($(this).attr("url"));
        });

        //$( "#mmenu" ).navfix( 0, 1000 );
        //$( "#path" ).navfix( 40, 999 );

        issapi.open("page/home.html", "首页");

    });

});